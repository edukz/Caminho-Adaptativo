let GRID_SIZE = 10;
let currentStepIndex = 0;
let autoPlayInterval = null;
let currentMode = 'demo';
let playbackSpeed = 2000;
let walkingSpeed = 500;
let isWalking = false;
let character = null;
let walkingInterval = null;
let currentWalkStep = 0;
let autoScroll = true;
let educationalAutoScroll = true;
let startTime = Date.now();
let isDrawingPath = false;
let isMouseDown = false;
let movingObstaclesInterval = null;
let finalApproach = false;
let spawnInterval = null;
let educationalMode = true; // Modo educacional ativado por padr√£o

// Fun√ß√£o auxiliar para obter dimens√µes do grid atual
function getGridDimensions() {
    let cellSize, gap;
    
    // SOLU√á√ÉO SIMPLES: Tamanhos fixos mas responsivos
    switch(GRID_SIZE) {
        case 8:
            cellSize = 60;
            gap = 3;
            break;
        case 10:
            cellSize = 50;
            gap = 3;
            break;
        default:
            cellSize = 50;
            gap = 3;
    }
    
    console.log(`Grid ${GRID_SIZE}x${GRID_SIZE}: cellSize=${cellSize}px, gap=${gap}px`);
    
    return {
        cellSize,
        gap,
        totalCellSize: cellSize + gap,
        characterSize: Math.max(25, cellSize * 0.75),
        gridPadding: 20
    };
}

// Configura√ß√µes Avan√ßadas
let advancedConfig = {
    gridSize: 10,
    movementType: 8, // 8-dire√ß√µes ou 4-dire√ß√µes
    obstacleSpeed: 3000, // velocidade em ms
    spawnFrequency: 0, // 0 = desabilitado, >0 = intervalo em ms
    replanLimit: 5, // limite de rec√°lculos
    showCoordinates: true,
    highlightOriginal: false
};
let gameState = {
    start: [0, 0],
    goal: [9, 9],
    obstacles: [[2,2], [2,3], [3,3], [5,5], [5,6], [6,5], [7,8]],
    dynamicObstacles: [],
    currentPath: [],
    customPath: [], // Caminho personalizado desenhado pelo usu√°rio
    waypoints: [], // Pontos de passagem obrigat√≥rios
    visitedCells: [], // C√©lulas que o rob√¥ j√° visitou
    steppedCells: [], // C√©lulas que o rob√¥ REALMENTE pisou
    detourCells: [], // C√©lulas visitadas durante desvios
    originalPath: [], // Caminho original antes dos desvios
    isOnDetour: false, // Flag para indicar se est√° desviando
    movingObstacles: [], // Obst√°culos que se movem
    stats: {
        cellsProcessed: 0,
        dynamicObstacles: 0,
        replanningCount: 0,
        pathLength: 0
    }
};

const demoSteps = [
    {
        title: "üéØ Cen√°rio Inicial",
        description: "Bot precisa ir de (0,0) para (9,9). Alguns obst√°culos j√° existem no mapa.",
        obstacles: [[2,2], [2,3], [3,3], [5,5], [5,6], [6,5], [7,8]],
        dynamicObstacles: [],
        currentPath: [],
        showComparison: false
    },
    {
        title: "üß† Calculando Caminho Original",
        description: "A* encontra o melhor caminho evitando obst√°culos est√°ticos.",
        obstacles: [[2,2], [2,3], [3,3], [5,5], [5,6], [6,5], [7,8]],
        dynamicObstacles: [],
        currentPath: [[0,0], [1,1], [1,2], [1,3], [1,4], [2,5], [3,6], [4,7], [5,8], [6,9], [7,9], [8,9], [9,9]],
        showComparison: false
    },
    {
        title: "‚ö†Ô∏è Pok√©mon Aparece!",
        description: "Um Pok√©mon selvagem bloqueia o caminho em (1,2)!",
        obstacles: [[2,2], [2,3], [3,3], [5,5], [5,6], [6,5], [7,8]],
        dynamicObstacles: [[1,2]],
        currentPath: [[0,0], [1,1]],
        blockedPath: [[1,2], [1,3], [1,4], [2,5], [3,6], [4,7], [5,8], [6,9], [7,9], [8,9], [9,9]],
        showComparison: false
    },
    {
        title: "üöÄ A* Adaptativo em A√ß√£o",
        description: "Mant√©m o progresso e recalcula apenas a parte necess√°ria.",
        obstacles: [[2,2], [2,3], [3,3], [5,5], [5,6], [6,5], [7,8]],
        dynamicObstacles: [[1,2]],
        currentPath: [[0,0], [1,1]],
        newPath: [[2,1], [3,2], [4,2], [4,3], [4,4], [4,5], [4,6], [4,7], [5,8], [6,9], [7,9], [8,9], [9,9]],
        showComparison: true,
        traditionalCost: "64 c√©lulas",
        adaptiveCost: "18 c√©lulas",
        savings: "72%"
    }
];

function setMode(mode) {
    // Anima√ß√£o de transi√ß√£o suave
    const container = document.querySelector('.simulation-area');
    container.style.opacity = '0.5';
    container.style.transform = 'scale(0.95)';
    
    setTimeout(() => {
        currentMode = mode;
        document.querySelectorAll('.mode-btn').forEach(btn => {
            btn.classList.remove('active');
            btn.style.transform = 'scale(1)';
        });
        document.getElementById(mode + '-btn').classList.add('active');
        document.getElementById(mode + '-btn').style.transform = 'scale(1.05)';
        
        // Controlar visibilidade dos controles baseado no modo
        const mainControls = document.getElementById('main-controls');
        const speedControls = document.getElementById('speed-controls');
        const drawingControls = document.getElementById('drawing-controls');
        
        // Parar obst√°culos m√≥veis e auto-spawn se estiverem ativos
        stopMovingObstacles();
        stopAutoSpawn();
        
        if (mode === 'custom') {
            // Modo Desenhar: apenas controles de desenho
            mainControls.style.display = 'none';
            speedControls.style.display = 'none';
            drawingControls.style.display = 'flex';
            enablePathDrawing();
        } else {
            // Modos Demo e Interativo: controles principais + velocidade
            mainControls.style.display = 'flex';
            speedControls.style.display = 'block';
            drawingControls.style.display = 'none';
            disablePathDrawing();
            
            if (mode === 'interactive') {
                calculateAndShowPath();
                startMovingObstacles(); // Iniciar obst√°culos m√≥veis
                if (advancedConfig.spawnFrequency > 0) {
                    startAutoSpawn(); // Iniciar auto-spawn se configurado
                }
            } else {
                resetDemo();
            }
        }
        
        // Restaurar anima√ß√£o
        container.style.opacity = '1';
        container.style.transform = 'scale(1)';
        
        setTimeout(() => {
            document.getElementById(mode + '-btn').style.transform = 'scale(1)';
        }, 200);
    }, 150);
}

function updateSpeed(value) {
    playbackSpeed = parseInt(value);
    document.getElementById('speed-display').textContent = (value / 1000) + 's';
}

function updateStats() {
    document.getElementById('cells-processed').textContent = gameState.stats.cellsProcessed;
    document.getElementById('dynamic-obstacles').textContent = gameState.stats.dynamicObstacles;
    document.getElementById('replanning-count').textContent = gameState.stats.replanningCount;
    document.getElementById('path-length').textContent = gameState.stats.pathLength;
}

function updateGridVisually() {
    // Atualiza apenas o visual das c√©lulas sem recriar o grid inteiro
    for (let row = 0; row < GRID_SIZE; row++) {
        for (let col = 0; col < GRID_SIZE; col++) {
            const cell = document.getElementById(`cell-${row}-${col}`);
            if (!cell) continue;
            
            // Resetar classes (exceto coordenadas)
            cell.className = 'cell';
            
            // Manter apenas as coordenadas
            const coordDiv = cell.querySelector('.coords');
            cell.innerHTML = '';
            if (coordDiv) {
                cell.appendChild(coordDiv);
            }
            
            // Aplicar estilos baseados no estado atual (ORDEM IMPORTA!)
            if (row === gameState.start[0] && col === gameState.start[1]) {
                cell.className += ' start';
                cell.innerHTML += '<div>S</div>';
            } else if (row === gameState.goal[0] && col === gameState.goal[1]) {
                cell.className += ' goal';
                cell.innerHTML += '<div>G</div>';
            } else if (gameState.obstacles.some(obs => obs[0] === row && obs[1] === col)) {
                cell.className += ' obstacle';
                cell.innerHTML += '<div>#</div>';
            } else if (gameState.dynamicObstacles.some(obs => obs[0] === row && obs[1] === col)) {
                cell.className += ' dynamic-obstacle';
                cell.innerHTML += '<div>P</div>';
            } else if (gameState.waypoints.some(p => p[0] === row && p[1] === col)) {
                // PRIORIDADE: Waypoints definidos pelo usu√°rio
                cell.className += ' waypoint';
                cell.innerHTML += '<div>‚≠ê</div>';
            } else if (gameState.steppedCells.some(p => p[0] === row && p[1] === col)) {
                // C√©lulas que o rob√¥ REALMENTE pisou
                cell.className += ' stepped';
                cell.innerHTML += '<div>üë£</div>';
            } else if (gameState.customPath.some(p => p[0] === row && p[1] === col)) {
                // Caminho personalizado desenhado pelo usu√°rio
                cell.className += ' custom-path';
                cell.innerHTML += '<div>‚úèÔ∏è</div>';
            } else if (gameState.detourCells.some(p => p[0] === row && p[1] === col)) {
                cell.className += ' detour';
                cell.innerHTML += '<div>‚Üó</div>';
            } else if (gameState.visitedCells.some(p => p[0] === row && p[1] === col)) {
                cell.className += ' visited';
                cell.innerHTML += '<div>‚Ä¢</div>';
            } else if (gameState.currentPath.some(p => p[0] === row && p[1] === col)) {
                cell.className += ' path';
                cell.innerHTML += '<div>‚Üí</div>';
            }
            
            // Re-adicionar coordenadas se necess√°rio
            if (!cell.querySelector('.coords')) {
                const coordDiv = document.createElement('div');
                coordDiv.className = 'coords';
                coordDiv.textContent = row + ',' + col;
                cell.appendChild(coordDiv);
            }
        }
    }
}

function createGrid(stepData = null) {
    const grid = document.getElementById('grid');
    const stepInfo = document.getElementById('current-step-info');
    const comparison = document.getElementById('comparison');
    
    grid.innerHTML = '';
    
    // Remove personagem existente
    if (character) {
        character.remove();
        character = null;
    }
    
    if (stepData) {
        stepInfo.innerHTML = `<h3>${stepData.title}</h3><p>${stepData.description}</p>`;
        
        if (stepData.showComparison) {
            comparison.style.display = 'block';
            document.getElementById('traditional-cost').textContent = stepData.traditionalCost;
            document.getElementById('adaptive-cost').textContent = stepData.adaptiveCost;
            document.getElementById('savings').textContent = stepData.savings;
        } else {
            comparison.style.display = 'none';
        }
    } else {
        stepInfo.innerHTML = '<h3>üéÆ Modo Interativo</h3><p>Clique nas c√©lulas para adicionar obst√°culos e veja o bonequinho se adaptar!</p>';
        comparison.style.display = 'none';
    }
    
    // Posi√ß√£o do grid para c√°lculos do personagem
    const gridRect = grid.getBoundingClientRect();
    
    for (let row = 0; row < GRID_SIZE; row++) {
        for (let col = 0; col < GRID_SIZE; col++) {
            const cell = document.createElement('div');
            cell.className = 'cell';
            cell.dataset.row = row;
            cell.dataset.col = col;
            cell.id = `cell-${row}-${col}`;
            
            // Coordenadas
            const coordDiv = document.createElement('div');
            coordDiv.className = 'coords';
            coordDiv.textContent = row + ',' + col;
            cell.appendChild(coordDiv);
            
            // Evento de clique para modo interativo ou desenho
            if (currentMode === 'interactive') {
                cell.addEventListener('click', () => handleCellClick(row, col));
            } else if (currentMode === 'custom') {
                // Modo desenhar: permitir AMBOS clique interativo E desenho
                cell.addEventListener('click', () => handleCellClick(row, col)); // Clique para obst√°culos
                cell.addEventListener('mousedown', (e) => handlePathDrawingStart(row, col, e)); // Desenho
                cell.addEventListener('mouseover', () => handlePathDrawingMove(row, col));
                cell.addEventListener('mouseup', () => handlePathDrawingEnd(row, col));
            }
            
            // Determinar tipo de c√©lula
            const obstacles = stepData ? stepData.obstacles : gameState.obstacles;
            const dynamicObstacles = stepData ? stepData.dynamicObstacles : gameState.dynamicObstacles;
            const currentPath = stepData ? stepData.currentPath : gameState.currentPath;
            
            if (row === gameState.start[0] && col === gameState.start[1]) {
                cell.className += ' start';
                cell.innerHTML += '<div>S</div>';
            } else if (row === gameState.goal[0] && col === gameState.goal[1]) {
                cell.className += ' goal';
                cell.innerHTML += '<div>G</div>';
            } else if (obstacles && obstacles.some(obs => obs[0] === row && obs[1] === col)) {
                cell.className += ' obstacle';
                cell.innerHTML += '<div>#</div>';
            } else if (dynamicObstacles && dynamicObstacles.some(obs => obs[0] === row && obs[1] === col)) {
                cell.className += ' dynamic-obstacle';
                cell.innerHTML += '<div>P</div>';
            } else if (gameState.waypoints.some(p => p[0] === row && p[1] === col)) {
                // PRIORIDADE: Waypoints definidos pelo usu√°rio
                cell.className += ' waypoint';
                cell.innerHTML += '<div>‚≠ê</div>';
            } else if (gameState.steppedCells.some(p => p[0] === row && p[1] === col)) {
                // C√©lulas que o rob√¥ REALMENTE pisou
                cell.className += ' stepped';
                cell.innerHTML += '<div>üë£</div>';
            } else if (gameState.customPath.some(p => p[0] === row && p[1] === col)) {
                // Caminho personalizado desenhado pelo usu√°rio
                cell.className += ' custom-path';
                cell.innerHTML += '<div>‚úèÔ∏è</div>';
            } else if (gameState.detourCells.some(p => p[0] === row && p[1] === col)) {
                cell.className += ' detour';
                cell.innerHTML += '<div>‚Üó</div>';
            } else if (gameState.visitedCells.some(p => p[0] === row && p[1] === col)) {
                cell.className += ' visited';
                cell.innerHTML += '<div>‚Ä¢</div>';
            } else if (stepData && stepData.newPath && stepData.newPath.some(p => p[0] === row && p[1] === col)) {
                cell.className += ' new-path';
                cell.innerHTML += '<div>‚Üí</div>';
            } else if (currentPath && currentPath.some(p => p[0] === row && p[1] === col)) {
                cell.className += ' path';
                cell.innerHTML += '<div>‚Üí</div>';
            } else if (stepData && stepData.blockedPath && stepData.blockedPath.some(p => p[0] === row && p[1] === col)) {
                cell.className += ' path';
                cell.innerHTML += '<div>‚úó</div>';
                cell.style.opacity = '0.3';
            }
            
            grid.appendChild(cell);
        }
    }
    
    // Criar personagem na posi√ß√£o inicial
    createCharacter();
    updateStats();
    
    // Log da cria√ß√£o do grid
    if (currentMode === 'interactive') {
        addLogEntry('system', 'Grid atualizado - Caminho recalculado');
    }
}

function createCharacter() {
    // Remover personagem existente
    if (character) {
        character.remove();
        character = null;
    }
    
    // Validar posi√ß√£o inicial
    if (gameState.start[0] >= GRID_SIZE || gameState.start[1] >= GRID_SIZE || 
        gameState.start[0] < 0 || gameState.start[1] < 0) {
        gameState.start = [0, 0];
        addLogEntry('system', '‚ö†Ô∏è Posi√ß√£o inicial corrigida para (0,0)');
    }
    
    character = document.createElement('div');
    character.className = 'character';
    character.id = 'walking-character';
    
    // Verificar se a c√©lula inicial existe
    const startCell = document.getElementById(`cell-${gameState.start[0]}-${gameState.start[1]}`);
    if (!startCell) {
        addLogEntry('error', `‚ùå C√©lula inicial (${gameState.start[0]},${gameState.start[1]}) n√£o encontrada!`);
        // For√ßar posi√ß√£o (0,0)
        gameState.start = [0, 0];
    }
    
    const dims = getGridDimensions();
    const grid = document.getElementById('grid');
    
    if (grid) {
        const left = gameState.start[1] * dims.totalCellSize + dims.gridPadding + (dims.cellSize / 2) - (dims.characterSize / 2);
        const top = gameState.start[0] * dims.totalCellSize + dims.gridPadding + (dims.cellSize / 2) - (dims.characterSize / 2);
        
        character.style.position = 'absolute';
        character.style.left = left + 'px';
        character.style.top = top + 'px';
        character.style.width = dims.characterSize + 'px';
        character.style.height = dims.characterSize + 'px';
        character.style.zIndex = '1000';
        character.style.pointerEvents = 'none';
        
        grid.style.position = 'relative';
        grid.appendChild(character);
        
        // Log da cria√ß√£o do personagem
        addLogEntry('success', `ü§ñ Rob√¥ criado em (${gameState.start[0]},${gameState.start[1]}) - Tamanho: ${dims.characterSize}px`);
        console.log(`Personagem criado na posi√ß√£o: left=${left}px, top=${top}px`);
    } else {
        addLogEntry('error', '‚ùå Grid n√£o encontrado! N√£o foi poss√≠vel criar o rob√¥.');
    }
}

function moveCharacterToCell(row, col, callback = null) {
    if (!character) return;
    
    // VALIDA√á√ÉO CR√çTICA: Verificar se posi√ß√£o est√° dentro dos limites
    if (row < 0 || row >= GRID_SIZE || col < 0 || col >= GRID_SIZE) {
        addLogEntry('error', `üö´ MOVIMENTO INV√ÅLIDO! Tentativa de mover para (${row},${col}) - Grid √© ${GRID_SIZE}x${GRID_SIZE}`);
        if (callback) callback();
        return;
    }
    
    const targetCell = document.getElementById(`cell-${row}-${col}`);
    if (!targetCell) {
        addLogEntry('error', `üö´ C√©lula (${row},${col}) n√£o existe no DOM!`);
        if (callback) callback();
        return;
    }
    
    // MARCAR A C√âLULA COMO PISADA IMEDIATAMENTE
    if (!gameState.steppedCells.some(p => p[0] === row && p[1] === col)) {
        gameState.steppedCells.push([row, col]);
        addLogEntry('movement', `üë£ Pisou em <span class="log-coordinates">(${row},${col})</span>`);
        
        // Verificar se √© um desvio (n√£o estava no caminho original)
        if (gameState.originalPath.length > 0 && 
            !gameState.originalPath.some(p => p[0] === row && p[1] === col) &&
            !gameState.customPath.some(p => p[0] === row && p[1] === col)) {
            gameState.detourCells.push([row, col]);
            addLogEntry('detour', `üîÑ Desvio detectado em <span class="log-coordinates">(${row},${col})</span>!`);
        }
        
        // Atualizar visual imediatamente
        updateGridVisually();
    }
    
    // Log do movimento
    addLogEntry('movement', `Movendo para <span class="log-coordinates">(${row},${col})</span>`);
    
    // Calcular nova posi√ß√£o baseada na posi√ß√£o real da c√©lula no DOM
    const targetCellRect = targetCell.getBoundingClientRect();
    const gridRect = targetCell.parentElement.getBoundingClientRect();
    
    // Posi√ß√£o relativa √† grid container
    const cellLeft = targetCellRect.left - gridRect.left;
    const cellTop = targetCellRect.top - gridRect.top;
    
    const dims = getGridDimensions();
    
    // Centralizar o rob√¥ na c√©lula usando as dimens√µes reais
    const newLeft = cellLeft + (targetCellRect.width / 2) - (dims.characterSize / 2);
    const newTop = cellTop + (targetCellRect.height / 2) - (dims.characterSize / 2);
    
    console.log(`üéØ Movendo rob√¥ para (${row},${col})`);
    console.log(`   C√©lula: ${targetCellRect.width}x${targetCellRect.height} em ${cellLeft},${cellTop}`);
    console.log(`   Rob√¥: ${dims.characterSize}x${dims.characterSize} -> ${newLeft}px, ${newTop}px`);
    
    // Adicionar classe de movimento
    character.classList.add('moving', 'walking');
    
    // Criar rastro na posi√ß√£o atual
    const currentLeft = parseInt(character.style.left);
    const currentTop = parseInt(character.style.top);
    createTrail(currentLeft + 17.5, currentTop + 17.5);
    
    // Animar movimento
    character.style.left = newLeft + 'px';
    character.style.top = newTop + 'px';
    
    // Remover classes ap√≥s anima√ß√£o
    setTimeout(() => {
        if (character) {
            character.classList.remove('moving', 'walking');
            if (callback) callback();
        }
    }, 300);
}

function createTrail(x, y) {
    const trail = document.createElement('div');
    trail.className = 'trail';
    trail.style.left = (x - 10) + 'px';
    trail.style.top = (y - 10) + 'px';
    
    document.getElementById('grid').appendChild(trail);
    
    // Remove o rastro ap√≥s a anima√ß√£o
    setTimeout(() => {
        if (trail.parentNode) {
            trail.parentNode.removeChild(trail);
        }
    }, 1000);
}

function startWalking() {
    if (isWalking) {
        stopWalking();
        return;
    }
    
    const path = gameState.currentPath;
    if (!path || path.length === 0) {
        addLogEntry('error', 'Nenhum caminho dispon√≠vel! Calcule um caminho primeiro.');
        alert('Nenhum caminho dispon√≠vel! Calcule um caminho primeiro.');
        return;
    }
    
    isWalking = true;
    finalApproach = false;
    
    // Salvar o caminho original para detectar desvios
    gameState.originalPath = [...path];
    
    // Se j√° estamos na posi√ß√£o inicial, come√ßar do pr√≥ximo passo
    currentWalkStep = (path[0][0] === gameState.start[0] && path[0][1] === gameState.start[1]) ? 1 : 0;
    document.getElementById('walk-btn').textContent = '‚èπÔ∏è Parar';
    
    addLogEntry('system', `üö∂ Iniciando caminhada - ${path.length} passos planejados`);
    addLogEntry('pathfinding', `Rota: ${path.map(p => `(${p[0]},${p[1]})`).join(' ‚Üí ')}`);
    
    // Come√ßar a caminhada
    walkNextStep();
}

function walkNextStep() {
    if (!isWalking || currentWalkStep >= gameState.currentPath.length) {
        // Chegou ao fim
        if (character && currentWalkStep > 0) {
            const finalPos = gameState.currentPath[currentWalkStep - 1];
            if (finalPos[0] === gameState.goal[0] && finalPos[1] === gameState.goal[1]) {
                character.classList.add('celebrating');
                addLogEntry('success', `üéâ DESTINO ALCAN√áADO! Rob√¥ chegou em <span class="log-coordinates">(${gameState.goal[0]},${gameState.goal[1]})</span>`);
                addLogEntry('system', `‚úÖ Miss√£o completa em ${currentWalkStep} movimentos!`);
                setTimeout(() => {
                    if (character) character.classList.remove('celebrating');
                }, 1000);
            } else {
                addLogEntry('error', `‚ùå Caminho incompleto! Parou em <span class="log-coordinates">(${finalPos[0]},${finalPos[1]})</span> em vez de <span class="log-coordinates">(${gameState.goal[0]},${gameState.goal[1]})</span>`);
            }
        } else {
            addLogEntry('error', '‚ùå Nenhum movimento realizado!');
        }
        stopWalking();
        return;
    }
    
    const nextPos = gameState.currentPath[currentWalkStep];
    
    // Verificar se a pr√≥xima posi√ß√£o est√° bloqueada
    const isBlocked = gameState.dynamicObstacles.some(obs => 
        obs[0] === nextPos[0] && obs[1] === nextPos[1]
    );
    
    if (isBlocked && currentWalkStep > 0) {
        // Obst√°culo encontrado! Recalcular caminho A PARTIR DA POSI√á√ÉO ATUAL
        const currentPos = gameState.currentPath[currentWalkStep - 1];
        addLogEntry('obstacle', `‚ö†Ô∏è Obst√°culo detectado em <span class="log-coordinates">(${nextPos[0]},${nextPos[1]})</span>!`);
        addLogEntry('pathfinding', `üß† A* Adaptativo ativado - Analisando op√ß√µes de <span class="log-coordinates">(${currentPos[0]},${currentPos[1]})</span>...`);
        addLogEntry('system', `üéØ Tentando manter o m√°ximo do caminho original desenhado pelo usu√°rio`);
        
        if (character) {
            character.classList.add('blocked');
            setTimeout(() => {
                if (character) character.classList.remove('blocked');
            }, 500);
        }
        
        // Simular rec√°lculo do A* Adaptativo INTELIGENTE
        setTimeout(() => {
            gameState.stats.replanningCount++;
            
            // ESTRAT√âGIA INTELIGENTE: Tentar reconectar ao caminho original
            const remainingOriginalPath = gameState.currentPath.slice(currentWalkStep + 1);
            let bestReconnectionPath = null;
            let bestReconnectionIndex = -1;
            let shortestDetour = Infinity;
            
            addLogEntry('pathfinding', `üîç Analisando ${Math.min(remainingOriginalPath.length, 5)} pontos futuros para reconex√£o...`);
            
            // Tentar reconectar a pontos futuros do caminho original
            for (let i = 0; i < Math.min(remainingOriginalPath.length, 5); i++) {
                const reconnectionPoint = remainingOriginalPath[i];
                const detourPath = findPath(currentPos, reconnectionPoint, gameState.obstacles.concat(gameState.dynamicObstacles));
                
                if (detourPath.length > 0) {
                    addLogEntry('pathfinding', `  ‚úÖ Op√ß√£o ${i+1}: Desvio de ${detourPath.length} passos at√© <span class="log-coordinates">(${reconnectionPoint[0]},${reconnectionPoint[1]})</span>`);
                    
                    if (detourPath.length < shortestDetour) {
                        bestReconnectionPath = detourPath;
                        bestReconnectionIndex = currentWalkStep + 1 + i;
                        shortestDetour = detourPath.length;
                    }
                } else {
                    addLogEntry('pathfinding', `  ‚ùå Op√ß√£o ${i+1}: Sem caminho para <span class="log-coordinates">(${reconnectionPoint[0]},${reconnectionPoint[1]})</span>`);
                }
            }
            
            let newPath;
            if (bestReconnectionPath && bestReconnectionIndex !== -1) {
                // SUCESSO: Reconectou ao caminho original
                const completedPath = gameState.currentPath.slice(0, currentWalkStep);
                const reconnectedPath = gameState.currentPath.slice(bestReconnectionIndex);
                newPath = completedPath.concat(bestReconnectionPath.slice(1)).concat(reconnectedPath);
                gameState.currentPath = newPath;
                
                const reconnectionPoint = bestReconnectionPath[bestReconnectionPath.length - 1];
                const stepsToReconnect = bestReconnectionPath.length - 1;
                const stepsPreserved = reconnectedPath.length;
                
                addLogEntry('success', `üéØ DECIS√ÉO: Desvio inteligente escolhido!`);
                addLogEntry('pathfinding', `üîÑ Fazendo desvio de ${stepsToReconnect} passos para reconectar em <span class="log-coordinates">(${reconnectionPoint[0]},${reconnectionPoint[1]})</span>`);
                addLogEntry('pathfinding', `üíæ Preservando ${stepsPreserved} passos do caminho original do usu√°rio`);
                addLogEntry('pathfinding', `üó∫Ô∏è Desvio: ${bestReconnectionPath.slice(1).map(p => `(${p[0]},${p[1]})`).join(' ‚Üí ')}`);
            } else {
                // FALLBACK: Calcular nova rota para o destino
                addLogEntry('system', `ü§î Nenhuma reconex√£o vi√°vel encontrada...`);
                newPath = findPath(currentPos, gameState.goal, gameState.obstacles.concat(gameState.dynamicObstacles));
                
                if (newPath.length > 0) {
                    const completedPath = gameState.currentPath.slice(0, currentWalkStep);
                    gameState.currentPath = completedPath.concat(newPath.slice(1));
                    
                    addLogEntry('pathfinding', `‚ö†Ô∏è DECIS√ÉO: Nova rota direta para o destino`);
                    addLogEntry('system', `üòî Infelizmente, perdemos o resto do caminho desenhado pelo usu√°rio`);
                    addLogEntry('pathfinding', `üó∫Ô∏è Nova rota: ${newPath.slice(1).map(p => `(${p[0]},${p[1]})`).join(' ‚Üí ')}`);
                } else {
                    addLogEntry('error', `üö´ Nenhum caminho alternativo encontrado de <span class="log-coordinates">(${currentPos[0]},${currentPos[1]})</span>! Miss√£o falhou.`);
                    stopWalking();
                    return;
                }
            }
            
            gameState.stats.pathLength = gameState.currentPath.length;
            addLogEntry('pathfinding', `‚ú® Continuando de <span class="log-coordinates">(${currentPos[0]},${currentPos[1]})</span>`);
            
            // Continuar caminhada do ponto atual
            walkNextStep();
        }, 1000);
        return;
    }
    
    // Validar se o movimento √© permitido (c√©lulas adjacentes)
    if (currentWalkStep > 0) {
        const currentPos = gameState.currentPath[currentWalkStep - 1];
        const distance = Math.abs(nextPos[0] - currentPos[0]) + Math.abs(nextPos[1] - currentPos[1]);
        const isDiagonal = Math.abs(nextPos[0] - currentPos[0]) === 1 && Math.abs(nextPos[1] - currentPos[1]) === 1;
        
        if (distance > 2 || (distance === 2 && !isDiagonal)) {
            addLogEntry('error', `üö´ MOVIMENTO INV√ÅLIDO! Tentativa de pular de <span class="log-coordinates">(${currentPos[0]},${currentPos[1]})</span> para <span class="log-coordinates">(${nextPos[0]},${nextPos[1]})</span>`);
            addLogEntry('system', 'üîß Recalculando caminho devido a erro de pathfinding...');
            
            // For√ßar rec√°lculo do caminho DA POSI√á√ÉO ATUAL
            setTimeout(() => {
                gameState.stats.replanningCount++;
                const newPath = findPath(currentPos, gameState.goal, gameState.obstacles.concat(gameState.dynamicObstacles));
                
                if (newPath.length > 0) {
                    const completedPath = gameState.currentPath.slice(0, currentWalkStep);
                    gameState.currentPath = completedPath.concat(newPath.slice(1));
                    gameState.stats.pathLength = gameState.currentPath.length;
                    walkNextStep();
                } else {
                    addLogEntry('error', 'üö´ Imposs√≠vel continuar - sem caminho v√°lido!');
                    stopWalking();
                }
            }, 1000);
            return;
        }
    }
    
    moveCharacterToCell(nextPos[0], nextPos[1], () => {
        currentWalkStep++;
        addLogEntry('movement', `Passo ${currentWalkStep}/${gameState.currentPath.length} - Posi√ß√£o atual: <span class="log-coordinates">(${nextPos[0]},${nextPos[1]})</span>`);
        
        // Verificar se voltou ao caminho original (detec√ß√£o simples)
        if (gameState.customPath.some(p => p[0] === nextPos[0] && p[1] === nextPos[1]) && 
            !gameState.visitedCells.some(p => p[0] === nextPos[0] && p[1] === nextPos[1])) {
            addLogEntry('success', `üéâ Reconectou ao caminho original! Voltando √† rota desenhada pelo usu√°rio`);
        }
        
        // Efeito de brilho quando est√° chegando ao final
        const distanceToGoal = Math.abs(nextPos[0] - gameState.goal[0]) + Math.abs(nextPos[1] - gameState.goal[1]);
        if (distanceToGoal <= 3 && !finalApproach) {
            finalApproach = true;
            addLogEntry('success', '‚ú® Aproxima√ß√£o final! Adicionando efeito de brilho...');
            addFinalApproachGlow();
        }
        
        if (isWalking) {
            walkingInterval = setTimeout(walkNextStep, walkingSpeed);
        }
    });
}

function stopWalking() {
    if (isWalking) {
        addLogEntry('system', '‚èπÔ∏è Caminhada interrompida pelo usu√°rio');
    }
    
    isWalking = false;
    finalApproach = false;
    if (walkingInterval) {
        clearTimeout(walkingInterval);
        walkingInterval = null;
    }
    document.getElementById('walk-btn').textContent = 'üö∂ Iniciar Caminhada';
    removeFinalApproachGlow();
}

// === SISTEMA DE OBST√ÅCULOS M√ìVEIS ===
function startMovingObstacles() {
    if (movingObstaclesInterval) return;
    
    // Criar alguns obst√°culos m√≥veis
    gameState.movingObstacles = [
        { pos: [3, 4], direction: [1, 0], speed: 3000 },
        { pos: [6, 6], direction: [0, 1], speed: 2500 },
        { pos: [8, 2], direction: [-1, 0], speed: 3500 }
    ];
    
    addLogEntry('system', 'üîÑ Obst√°culos m√≥veis ativados!');
    
    movingObstaclesInterval = setInterval(() => {
        moveObstacles();
    }, advancedConfig.obstacleSpeed);
}

function stopMovingObstacles() {
    if (movingObstaclesInterval) {
        clearInterval(movingObstaclesInterval);
        movingObstaclesInterval = null;
    }
    gameState.movingObstacles = [];
}

function moveObstacles() {
    if (currentMode !== 'interactive' || gameState.movingObstacles.length === 0) return;
    
    gameState.movingObstacles.forEach((obstacle, index) => {
        const [row, col] = obstacle.pos;
        const [dr, dc] = obstacle.direction;
        
        // Calcular nova posi√ß√£o
        let newRow = row + dr;
        let newCol = col + dc;
        
        // Verificar limites e mudar dire√ß√£o se necess√°rio
        if (newRow < 0 || newRow >= GRID_SIZE || newCol < 0 || newCol >= GRID_SIZE ||
            gameState.obstacles.some(obs => obs[0] === newRow && obs[1] === newCol)) {
            // Mudar dire√ß√£o aleatoriamente
            const directions = [[-1, 0], [1, 0], [0, -1], [0, 1]];
            obstacle.direction = directions[Math.floor(Math.random() * directions.length)];
            newRow = row + obstacle.direction[0];
            newCol = col + obstacle.direction[1];
            
            // Se ainda inv√°lido, ficar parado
            if (newRow < 0 || newRow >= GRID_SIZE || newCol < 0 || newCol >= GRID_SIZE ||
                gameState.obstacles.some(obs => obs[0] === newRow && obs[1] === newCol)) {
                return;
            }
        }
        
        // Remover obst√°culo da posi√ß√£o antiga
        gameState.dynamicObstacles = gameState.dynamicObstacles.filter(obs => 
            !(obs[0] === row && obs[1] === col));
        
        // Adicionar na nova posi√ß√£o
        obstacle.pos = [newRow, newCol];
        if (!gameState.dynamicObstacles.some(obs => obs[0] === newRow && obs[1] === newCol)) {
            gameState.dynamicObstacles.push([newRow, newCol]);
        }
        
        addLogEntry('obstacle', `üîÑ Pok√©mon se moveu de (${row},${col}) para (${newRow},${newCol})`);
    });
    
    // Atualizar visual
    updateGridVisually();
}

// === EFEITOS DE BRILHO FINAL ===
function addFinalApproachGlow() {
    const goalCell = document.getElementById(`cell-${gameState.goal[0]}-${gameState.goal[1]}`);
    if (goalCell) {
        goalCell.classList.add('final-glow');
        
        // Adicionar efeito de brilho nas c√©lulas pr√≥ximas ao destino
        for (let dr = -2; dr <= 2; dr++) {
            for (let dc = -2; dc <= 2; dc++) {
                const r = gameState.goal[0] + dr;
                const c = gameState.goal[1] + dc;
                if (r >= 0 && r < GRID_SIZE && c >= 0 && c < GRID_SIZE) {
                    const cell = document.getElementById(`cell-${r}-${c}`);
                    if (cell && Math.abs(dr) + Math.abs(dc) <= 2) {
                        cell.classList.add('approach-glow');
                    }
                }
            }
        }
    }
}

function removeFinalApproachGlow() {
    document.querySelectorAll('.final-glow, .approach-glow').forEach(cell => {
        cell.classList.remove('final-glow', 'approach-glow');
    });
}


// Sistema de Log
function addLogEntry(type, message) {
    // Determinar qual container usar baseado no tipo
    let logContainer, useAutoScroll;
    
    if (type === 'learning') {
        logContainer = document.getElementById('educational-log-container');
        useAutoScroll = educationalAutoScroll;
    } else {
        logContainer = document.getElementById('system-log-container');
        useAutoScroll = autoScroll;
    }
    
    if (!logContainer) {
        console.log(`LOG [${type}]: ${message}`);
        return;
    }
    
    const logEntry = document.createElement('div');
    logEntry.className = `log-entry ${type}`;
    
    const currentTime = new Date();
    const timeString = currentTime.toLocaleTimeString('pt-BR', { 
        hour12: false,
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    
    logEntry.innerHTML = `
        <span class="log-time">${timeString}</span>
        <span class="log-message">${message}</span>
    `;
    
    logContainer.appendChild(logEntry);
    
    // Auto-scroll para o final se ativado
    if (useAutoScroll) {
        logContainer.scrollTop = logContainer.scrollHeight;
    }
    
    // Limitar n√∫mero de entradas (manter √∫ltimas 500 para cada log)
    const entries = logContainer.querySelectorAll('.log-entry');
    if (entries.length > 500) {
        // Remove as 50 entradas mais antigas de uma vez para melhor performance
        for (let i = 0; i < 50; i++) {
            if (entries[i]) {
                entries[i].remove();
            }
        }
    }
}

function clearSystemLog() {
    const logContainer = document.getElementById('system-log-container');
    const entriesCount = logContainer.querySelectorAll('.log-entry').length;
    logContainer.innerHTML = '';
    addLogEntry('system', `üóëÔ∏è Log do sistema limpo - ${entriesCount} entradas removidas.`);
}

function clearEducationalLog() {
    const logContainer = document.getElementById('educational-log-container');
    const entriesCount = logContainer.querySelectorAll('.log-entry').length;
    logContainer.innerHTML = '';
    addLogEntry('learning', `üóëÔ∏è Log educacional limpo - ${entriesCount} entradas removidas.`);
}

function toggleSystemAutoScroll() {
    autoScroll = !autoScroll;
    const btn = document.getElementById('system-auto-scroll-btn');
    btn.textContent = `üìú Auto-scroll: ${autoScroll ? 'ON' : 'OFF'}`;
}

function toggleEducationalAutoScroll() {
    educationalAutoScroll = !educationalAutoScroll;
    const btn = document.getElementById('educational-auto-scroll-btn');
    btn.textContent = `üìú Auto-scroll: ${educationalAutoScroll ? 'ON' : 'OFF'}`;
}

function toggleEducationalMode() {
    educationalMode = !educationalMode;
    const btn = document.getElementById('educational-mode-toggle');
    const mainBtn = document.getElementById('educational-mode-btn');
    
    if (btn) {
        btn.textContent = `üéì ${educationalMode ? 'ON' : 'OFF'}`;
        btn.className = `log-btn secondary ${educationalMode ? 'active' : ''}`;
    }
    
    if (mainBtn) {
        mainBtn.textContent = `üéì Modo Educacional: ${educationalMode ? 'ON' : 'OFF'}`;
        mainBtn.className = `secondary ${educationalMode ? 'active' : ''}`;
    }
    
    if (educationalMode) {
        addLogEntry('system', 'üéì Modo Educacional ATIVADO - O algoritmo A* explicar√° suas decis√µes');
        addLogEntry('learning', 'üéì Modo Educacional ATIVADO - Pronto para explicar decis√µes do A*!');
    } else {
        addLogEntry('system', 'üéì Modo Educacional DESATIVADO - Logs simplificados');
        addLogEntry('learning', 'üéì Modo Educacional DESATIVADO - Logs educacionais pausados.');
    }
}

function showLogStats() {
    const logContainer = document.getElementById('log-container');
    const entries = logContainer.querySelectorAll('.log-entry');
    
    // Contar entradas por tipo
    const stats = {
        system: 0,
        movement: 0,
        obstacle: 0,
        pathfinding: 0,
        success: 0,
        error: 0,
        detour: 0,
        total: entries.length
    };
    
    entries.forEach(entry => {
        if (entry.classList.contains('system')) stats.system++;
        else if (entry.classList.contains('movement')) stats.movement++;
        else if (entry.classList.contains('obstacle')) stats.obstacle++;
        else if (entry.classList.contains('pathfinding')) stats.pathfinding++;
        else if (entry.classList.contains('success')) stats.success++;
        else if (entry.classList.contains('error')) stats.error++;
        else if (entry.classList.contains('detour')) stats.detour++;
    });
    
    const percentage = ((stats.total / 1000) * 100).toFixed(1);
    
    addLogEntry('system', `üìä ESTAT√çSTICAS DO LOG:`);
    addLogEntry('system', `   üìù Total de entradas: ${stats.total}/1000 (${percentage}%)`);
    addLogEntry('system', `   ‚öôÔ∏è Sistema: ${stats.system} | üö∂ Movimento: ${stats.movement}`);
    addLogEntry('system', `   üß† Pathfinding: ${stats.pathfinding} | üéØ Sucesso: ${stats.success}`);
    addLogEntry('system', `   ‚ö†Ô∏è Obst√°culos: ${stats.obstacle} | ‚ùå Erros: ${stats.error}`);
    addLogEntry('system', `   üîÑ Desvios: ${stats.detour}`);
    
    if (stats.total > 800) {
        addLogEntry('system', `‚ö†Ô∏è Log quase cheio! ${1000 - stats.total} entradas restantes.`);
    }
}

function handleCellClick(row, col) {
    if ((row === gameState.start[0] && col === gameState.start[1]) ||
        (row === gameState.goal[0] && col === gameState.goal[1])) {
        return; // N√£o permite modificar in√≠cio/fim
    }
    
    // N√ÉO parar caminhada - deixar o algoritmo adaptativo funcionar!
    // Se o rob√¥ estiver caminhando, ele vai detectar o obst√°culo e recalcular
    
    const isObstacle = gameState.obstacles.some(obs => obs[0] === row && obs[1] === col);
    const isDynamicObstacle = gameState.dynamicObstacles.some(obs => obs[0] === row && obs[1] === col);
    
    if (isObstacle) {
        // Remove obst√°culo est√°tico
        gameState.obstacles = gameState.obstacles.filter(obs => !(obs[0] === row && obs[1] === col));
        addLogEntry('system', `Obst√°culo removido de <span class="log-coordinates">(${row},${col})</span>`);
    } else if (isDynamicObstacle) {
        // Remove obst√°culo din√¢mico
        gameState.dynamicObstacles = gameState.dynamicObstacles.filter(obs => !(obs[0] === row && obs[1] === col));
        gameState.stats.dynamicObstacles--;
        addLogEntry('system', `Pok√©mon removido de <span class="log-coordinates">(${row},${col})</span>`);
    } else {
        // Adiciona obst√°culo din√¢mico
        gameState.dynamicObstacles.push([row, col]);
        gameState.stats.dynamicObstacles++;
        gameState.stats.replanningCount++;
        addLogEntry('obstacle', `üêõ Pok√©mon apareceu em <span class="log-coordinates">(${row},${col})</span>!`);
        
        // Se o rob√¥ estiver caminhando, ele vai detectar o obst√°culo automaticamente
        if (isWalking) {
            addLogEntry('system', 'üéØ Rob√¥ detectar√° o obst√°culo no pr√≥ximo movimento...');
        }
    }
    
    // SEMPRE atualizar o visual, independente se est√° caminhando ou n√£o
    if (isWalking) {
        // Durante caminhada: apenas atualizar visual
        updateGridVisually();
        updateStats();
    } else {
        // Parado: recalcular caminho baseado no modo
        if (currentMode === 'interactive') {
            calculateAndShowPath();
        } else if (currentMode === 'custom') {
            updateGridVisually(); // No modo desenhar, apenas atualizar visual
            updateStats();
        } else {
            calculateAndShowPath(); // Demo mode
        }
    }
}

function calculateAndShowPath() {
    // Simula√ß√£o simplificada do A*
    const path = findPath(gameState.start, gameState.goal, gameState.obstacles.concat(gameState.dynamicObstacles));
    gameState.currentPath = path;
    gameState.stats.pathLength = path.length;
    gameState.stats.cellsProcessed += path.length;
    
    createGrid();
}

function findPath(start, goal, obstacles) {
    // Implementa√ß√£o corrigida do A* que n√£o permite saltos imposs√≠veis
    const openSet = [];
    const closedSet = new Set();
    const cameFrom = new Map();
    const gScore = new Map();
    const fScore = new Map();
    
    // Fun√ß√£o para converter posi√ß√£o em string para usar como chave
    const posKey = (pos) => `${pos[0]},${pos[1]}`;
    
    // Fun√ß√£o heur√≠stica (dist√¢ncia Manhattan)
    const heuristic = (a, b) => Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);
    
    // Fun√ß√£o para obter vizinhos v√°lidos (baseado na configura√ß√£o de movimento)
    const getNeighbors = (pos) => {
        const neighbors = [];
        const [row, col] = pos;
        
        // Dire√ß√µes baseadas na configura√ß√£o
        let directions;
        if (advancedConfig.movementType === 8) {
            // 8 dire√ß√µes (incluindo diagonais)
            directions = [
                [-1, -1], [-1, 0], [-1, 1],
                [0, -1],           [0, 1],
                [1, -1],  [1, 0],  [1, 1]
            ];
        } else {
            // 4 dire√ß√µes (apenas ortogonais)
            directions = [
                [-1, 0],
                [0, -1], [0, 1],
                [1, 0]
            ];
        }
        
        for (const [dr, dc] of directions) {
            const newRow = row + dr;
            const newCol = col + dc;
            
            // Verificar se est√° dentro dos limites
            if (newRow >= 0 && newRow < GRID_SIZE && newCol >= 0 && newCol < GRID_SIZE) {
                // Verificar se n√£o √© obst√°culo
                if (!obstacles.some(obs => obs[0] === newRow && obs[1] === newCol)) {
                    neighbors.push([newRow, newCol]);
                }
            }
        }
        
        return neighbors;
    };
    
    // Inicializar
    const startKey = posKey(start);
    const goalKey = posKey(goal);
    
    // Log educacional: Iniciando algoritmo
    if (educationalMode) {
        addLogEntry('learning', `üéì INICIANDO A*: De (${start[0]},${start[1]}) para (${goal[0]},${goal[1]})`);
        addLogEntry('learning', `üìö Heur√≠stica inicial: ${heuristic(start, goal)} (dist√¢ncia Manhattan)`);
    }
    
    openSet.push({pos: start, f: heuristic(start, goal)});
    gScore.set(startKey, 0);
    fScore.set(startKey, heuristic(start, goal));
    
    let iteration = 0;
    
    while (openSet.length > 0) {
        iteration++;
        
        // Ordenar por f-score e pegar o melhor
        openSet.sort((a, b) => a.f - b.f);
        const current = openSet.shift();
        const currentKey = posKey(current.pos);
        
        // Log educacional: C√©lula atual sendo examinada
        if (educationalMode) {
            addLogEntry('learning', `üîç Itera√ß√£o ${iteration}: Examinando (${current.pos[0]},${current.pos[1]}) - F=${current.f.toFixed(1)}`);
        }
        
        // Chegou no objetivo
        if (currentKey === goalKey) {
            if (educationalMode) {
                addLogEntry('learning', `üéØ SUCESSO! Destino alcan√ßado em ${iteration} itera√ß√µes`);
            }
            
            const path = [];
            let temp = current.pos;
            let tempKey = posKey(temp);
            
            while (cameFrom.has(tempKey)) {
                path.unshift(temp);
                temp = cameFrom.get(tempKey);
                tempKey = posKey(temp);
            }
            path.unshift(start);
            
            if (educationalMode) {
                addLogEntry('learning', `üõ§Ô∏è Caminho encontrado com ${path.length} c√©lulas (custo ${gScore.get(goalKey).toFixed(1)})`);
            }
            return path;
        }
        
        closedSet.add(currentKey);
        
        // Examinar vizinhos
        const neighbors = getNeighbors(current.pos);
        if (educationalMode) {
            addLogEntry('learning', `üëÄ Analisando ${neighbors.length} vizinhos v√°lidos...`);
        }
        
        for (const neighbor of neighbors) {
            const neighborKey = posKey(neighbor);
            
            if (closedSet.has(neighborKey)) {
                if (educationalMode) {
                    addLogEntry('learning', `‚ùå (${neighbor[0]},${neighbor[1]}) j√° foi visitada - ignorando`);
                }
                continue;
            }
            
            // Calcular custo do movimento (diagonal = 1.4, ortogonal = 1.0)
            const moveCost = (Math.abs(neighbor[0] - current.pos[0]) + Math.abs(neighbor[1] - current.pos[1])) === 2 ? 1.4 : 1.0;
            const tentativeGScore = gScore.get(currentKey) + moveCost;
            const heuristicValue = heuristic(neighbor, goal);
            
            if (!gScore.has(neighborKey) || tentativeGScore < gScore.get(neighborKey)) {
                const isNewCell = !gScore.has(neighborKey);
                const oldGScore = gScore.get(neighborKey) || Infinity;
                
                cameFrom.set(neighborKey, current.pos);
                gScore.set(neighborKey, tentativeGScore);
                const fScoreValue = tentativeGScore + heuristicValue;
                fScore.set(neighborKey, fScoreValue);
                
                if (educationalMode) {
                    if (isNewCell) {
                        addLogEntry('learning', `‚úÖ Nova c√©lula (${neighbor[0]},${neighbor[1]}): G=${tentativeGScore.toFixed(1)} + H=${heuristicValue} = F=${fScoreValue.toFixed(1)}`);
                    } else {
                        addLogEntry('learning', `üîÑ Caminho melhor para (${neighbor[0]},${neighbor[1]}): G=${oldGScore.toFixed(1)}‚Üí${tentativeGScore.toFixed(1)} (economia: ${(oldGScore - tentativeGScore).toFixed(1)})`);
                    }
                }
                
                // Adicionar √† lista aberta se n√£o estiver l√°
                if (!openSet.some(item => posKey(item.pos) === neighborKey)) {
                    openSet.push({pos: neighbor, f: fScoreValue});
                }
            } else {
                if (educationalMode) {
                    addLogEntry('learning', `‚ö†Ô∏è (${neighbor[0]},${neighbor[1]}) j√° tem caminho melhor (G atual: ${gScore.get(neighborKey).toFixed(1)} < tentativa: ${tentativeGScore.toFixed(1)})`);
                }
            }
        }
        
        // Log do estado atual das listas
        if (educationalMode && iteration % 3 === 0) { // A cada 3 itera√ß√µes para n√£o poluir
            addLogEntry('learning', `üìä Estado: ${openSet.length} c√©lulas em aberto, ${closedSet.size} c√©lulas fechadas`);
        }
    }
    
    // N√£o encontrou caminho
    if (educationalMode) {
        addLogEntry('learning', `üö´ FALHA: Nenhum caminho encontrado ap√≥s ${iteration} itera√ß√µes`);
    }
    return [];
}

function addRandomObstacle() {
    let attempts = 0;
    while (attempts < 20) {
        const row = Math.floor(Math.random() * GRID_SIZE);
        const col = Math.floor(Math.random() * GRID_SIZE);
        
        if ((row !== gameState.start[0] || col !== gameState.start[1]) &&
            (row !== gameState.goal[0] || col !== gameState.goal[1]) &&
            !gameState.obstacles.some(obs => obs[0] === row && obs[1] === col) &&
            !gameState.dynamicObstacles.some(obs => obs[0] === row && obs[1] === col)) {
            
            gameState.obstacles.push([row, col]);
            
            addLogEntry('obstacle', `üé≤ Obst√°culo aleat√≥rio criado em <span class="log-coordinates">(${row},${col})</span>`);
            
            // SEMPRE atualizar visual
            if (isWalking) {
                updateGridVisually();
                updateStats();
                addLogEntry('system', 'üéØ Rob√¥ detectar√° o obst√°culo no pr√≥ximo movimento...');
            } else {
                if (currentMode === 'interactive') {
                    calculateAndShowPath();
                } else if (currentMode === 'custom') {
                    updateGridVisually(); // Atualizar visual no modo desenhar
                } else {
                    createGrid(demoSteps[currentStepIndex]);
                }
            }
            break;
        }
        attempts++;
    }
}

function addRandomPokemon() {
    let attempts = 0;
    while (attempts < 20) {
        const row = Math.floor(Math.random() * GRID_SIZE);
        const col = Math.floor(Math.random() * GRID_SIZE);
        
        if ((row !== gameState.start[0] || col !== gameState.start[1]) &&
            (row !== gameState.goal[0] || col !== gameState.goal[1]) &&
            !gameState.obstacles.some(obs => obs[0] === row && obs[1] === col) &&
            !gameState.dynamicObstacles.some(obs => obs[0] === row && obs[1] === col)) {
            
            gameState.dynamicObstacles.push([row, col]);
            gameState.stats.dynamicObstacles++;
            gameState.stats.replanningCount++;
            
            addLogEntry('obstacle', `üêõ Pok√©mon aleat√≥rio apareceu em <span class="log-coordinates">(${row},${col})</span>`);
            
            // SEMPRE atualizar visual
            if (isWalking) {
                updateGridVisually();
                updateStats();
                addLogEntry('system', 'üéØ Rob√¥ detectar√° o pok√©mon no pr√≥ximo movimento...');
            } else {
                if (currentMode === 'interactive') {
                    calculateAndShowPath();
                } else if (currentMode === 'custom') {
                    updateGridVisually(); // Atualizar visual no modo desenhar
                    updateStats(); // Atualizar estat√≠sticas
                } else {
                    createGrid(demoSteps[currentStepIndex]);
                }
            }
            break;
        }
        attempts++;
    }
}

function clearFootprints() {
    gameState.visitedCells = [];
    gameState.steppedCells = [];
    gameState.detourCells = [];
    gameState.isOnDetour = false;
    
    addLogEntry('system', 'üë£ Pegadas do rob√¥ limpas');
    
    if (isWalking) {
        updateGridVisually();
    } else {
        if (currentMode === 'interactive') {
            calculateAndShowPath();
        } else if (currentMode === 'custom') {
            updateGridVisually();
        } else {
            createGrid(demoSteps[currentStepIndex]);
        }
    }
}

// === SISTEMA DE DESENHO DE CAMINHO PERSONALIZADO ===

function enablePathDrawing() {
    isDrawingPath = false;
    addLogEntry('system', 'üé® Modo de desenho ativado! Clique "Iniciar Desenho" para come√ßar.');
    createGrid(); // Recriar grid no modo desenho
}

function disablePathDrawing() {
    isDrawingPath = false;
    isMouseDown = false;
}

function togglePathDrawing() {
    isDrawingPath = !isDrawingPath;
    const btn = document.getElementById('draw-toggle-btn');
    
    if (isDrawingPath) {
        btn.textContent = 'üõë Parar Desenho';
        btn.className = 'danger';
        addLogEntry('system', '‚úèÔ∏è Desenho ativado! Clique e arraste para desenhar o caminho.');
    } else {
        btn.textContent = '‚úèÔ∏è Iniciar Desenho';
        btn.className = 'success';
        addLogEntry('system', 'üõë Desenho desativado.');
    }
}

function handlePathDrawingStart(row, col, event) {
    if (!isDrawingPath) return;
    
    event.preventDefault();
    isMouseDown = true;
    
    // N√£o desenhar em obst√°culos ou in√≠cio/fim
    if ((row === gameState.start[0] && col === gameState.start[1]) ||
        (row === gameState.goal[0] && col === gameState.goal[1]) ||
        gameState.obstacles.some(obs => obs[0] === row && obs[1] === col) ||
        gameState.dynamicObstacles.some(obs => obs[0] === row && obs[1] === col)) {
        return;
    }
    
    // Adicionar ao caminho personalizado
    if (!gameState.customPath.some(p => p[0] === row && p[1] === col)) {
        gameState.customPath.push([row, col]);
        addLogEntry('system', `‚úèÔ∏è Adicionado ao caminho: <span class="log-coordinates">(${row},${col})</span>`);
        updateGridVisually();
    }
}

function handlePathDrawingMove(row, col) {
    if (!isDrawingPath || !isMouseDown) return;
    
    // N√£o desenhar em obst√°culos ou in√≠cio/fim
    if ((row === gameState.start[0] && col === gameState.start[1]) ||
        (row === gameState.goal[0] && col === gameState.goal[1]) ||
        gameState.obstacles.some(obs => obs[0] === row && obs[1] === col) ||
        gameState.dynamicObstacles.some(obs => obs[0] === row && obs[1] === col)) {
        return;
    }
    
    // Adicionar ao caminho personalizado se n√£o existir
    if (!gameState.customPath.some(p => p[0] === row && p[1] === col)) {
        gameState.customPath.push([row, col]);
        updateGridVisually();
    }
}

function handlePathDrawingEnd(row, col) {
    if (!isDrawingPath) return;
    isMouseDown = false;
}

function addWaypoint() {
    addLogEntry('system', '‚≠ê Modo Waypoint ativado! Clique nas c√©lulas para definir pontos obrigat√≥rios.');
    
    // Temporariamente ativar modo waypoint
    const cells = document.querySelectorAll('.cell');
    cells.forEach(cell => {
        const originalClick = cell.onclick;
        cell.onclick = function(e) {
            const row = parseInt(cell.dataset.row);
            const col = parseInt(cell.dataset.col);
            
            // N√£o permitir waypoint em obst√°culos
            if (gameState.obstacles.some(obs => obs[0] === row && obs[1] === col) ||
                gameState.dynamicObstacles.some(obs => obs[0] === row && obs[1] === col)) {
                return;
            }
            
            // Toggle waypoint
            const existingIndex = gameState.waypoints.findIndex(w => w[0] === row && w[1] === col);
            if (existingIndex >= 0) {
                gameState.waypoints.splice(existingIndex, 1);
                addLogEntry('system', `‚≠ê Waypoint removido de <span class="log-coordinates">(${row},${col})</span>`);
            } else {
                gameState.waypoints.push([row, col]);
                addLogEntry('system', `‚≠ê Waypoint adicionado em <span class="log-coordinates">(${row},${col})</span>`);
            }
            
            updateGridVisually();
            
            // Restaurar click original depois de um tempo
            setTimeout(() => {
                cell.onclick = originalClick;
            }, 100);
        };
    });
}

function clearCustomPath() {
    gameState.customPath = [];
    gameState.waypoints = [];
    gameState.currentPath = []; // Limpar caminho atual tamb√©m
    gameState.visitedCells = []; // Limpar c√©lulas visitadas
    gameState.steppedCells = []; // Limpar pegadas
    gameState.detourCells = []; // Limpar desvios
    
    addLogEntry('system', 'üóëÔ∏è Desenho, waypoints e caminhos anteriores apagados');
    
    // For√ßar recria√ß√£o completa do grid no modo desenhar
    if (currentMode === 'custom') {
        createGrid();
    } else {
        updateGridVisually();
    }
}

function followCustomPath() {
    if (gameState.customPath.length === 0 && gameState.waypoints.length === 0) {
        addLogEntry('error', '‚ùå Nenhum caminho desenhado! Desenhe um caminho primeiro.');
        alert('Desenhe um caminho primeiro usando "Iniciar Desenho" ou "Modo Waypoint"!');
        return;
    }
    
    // Parar caminhada se estiver ativa
    if (isWalking) {
        stopWalking();
    }
    
    // Criar caminho baseado no desenho do usu√°rio
    let finalPath = [];
    
    if (gameState.waypoints.length > 0) {
        // WAYPOINTS: Usar A* para conectar os pontos
        addLogEntry('pathfinding', `‚≠ê Processando ${gameState.waypoints.length} waypoints...`);
        
        let currentPos = gameState.start;
        finalPath.push(currentPos);
        
        for (let i = 0; i < gameState.waypoints.length; i++) {
            const waypoint = gameState.waypoints[i];
            const pathSegment = findPath(currentPos, waypoint, gameState.obstacles.concat(gameState.dynamicObstacles));
            
            if (pathSegment.length > 0) {
                finalPath = finalPath.concat(pathSegment.slice(1));
                currentPos = waypoint;
                addLogEntry('pathfinding', `‚úÖ Waypoint ${i+1} conectado: <span class="log-coordinates">(${waypoint[0]},${waypoint[1]})</span>`);
            } else {
                addLogEntry('error', `‚ùå N√£o foi poss√≠vel conectar ao waypoint <span class="log-coordinates">(${waypoint[0]},${waypoint[1]})</span>`);
            }
        }
        
        const finalSegment = findPath(currentPos, gameState.goal, gameState.obstacles.concat(gameState.dynamicObstacles));
        if (finalSegment.length > 0) {
            finalPath = finalPath.concat(finalSegment.slice(1));
            addLogEntry('pathfinding', `üéØ Caminho final para destino conectado`);
        }
        
    } else if (gameState.customPath.length > 0) {
        // DESENHO LIVRE: Usar EXATAMENTE o caminho desenhado
        addLogEntry('pathfinding', `‚úèÔ∏è Seguindo caminho desenhado EXATAMENTE como foi feito...`);
        
        // Conectar in√≠cio ao primeiro ponto do desenho com A*
        const firstPoint = gameState.customPath[0];
        const startSegment = findPath(gameState.start, firstPoint, gameState.obstacles.concat(gameState.dynamicObstacles));
        
        if (startSegment.length > 0) {
            finalPath = startSegment;
            addLogEntry('pathfinding', `üîó Conectado in√≠cio <span class="log-coordinates">(${gameState.start[0]},${gameState.start[1]})</span> ao primeiro desenho <span class="log-coordinates">(${firstPoint[0]},${firstPoint[1]})</span>`);
        } else {
            addLogEntry('error', '‚ùå N√£o foi poss√≠vel conectar ao in√≠cio do caminho desenhado');
            return;
        }
        
        // Adicionar EXATAMENTE os pontos desenhados na ORDEM ORIGINAL
        for (let i = 1; i < gameState.customPath.length; i++) {
            const currentPoint = gameState.customPath[i];
            const previousPoint = gameState.customPath[i-1];
            
            // Verificar se o movimento √© v√°lido (c√©lulas adjacentes)
            const distance = Math.abs(currentPoint[0] - previousPoint[0]) + Math.abs(currentPoint[1] - previousPoint[1]);
            const isDiagonal = Math.abs(currentPoint[0] - previousPoint[0]) === 1 && Math.abs(currentPoint[1] - previousPoint[1]) === 1;
            
            if (distance <= 2 && (distance <= 1 || isDiagonal)) {
                // Movimento v√°lido - adicionar diretamente
                finalPath.push(currentPoint);
            } else {
                // Movimento inv√°lido - usar A* para conectar estes dois pontos
                addLogEntry('pathfinding', `üîó Conectando <span class="log-coordinates">(${previousPoint[0]},${previousPoint[1]})</span> ‚Üí <span class="log-coordinates">(${currentPoint[0]},${currentPoint[1]})</span> com A*`);
                const connectionSegment = findPath(previousPoint, currentPoint, gameState.obstacles.concat(gameState.dynamicObstacles));
                
                if (connectionSegment.length > 0) {
                    finalPath = finalPath.concat(connectionSegment.slice(1)); // Remove duplicata
                } else {
                    addLogEntry('error', `‚ùå N√£o foi poss√≠vel conectar pontos do desenho`);
                    finalPath.push(currentPoint); // Adicionar mesmo assim
                }
            }
        }
        
        // Conectar √∫ltimo ponto ao destino com A*
        const lastPoint = gameState.customPath[gameState.customPath.length - 1];
        if (lastPoint[0] !== gameState.goal[0] || lastPoint[1] !== gameState.goal[1]) {
            const endSegment = findPath(lastPoint, gameState.goal, gameState.obstacles.concat(gameState.dynamicObstacles));
            
            if (endSegment.length > 0) {
                finalPath = finalPath.concat(endSegment.slice(1));
                addLogEntry('pathfinding', `üéØ Conectado √∫ltimo desenho <span class="log-coordinates">(${lastPoint[0]},${lastPoint[1]})</span> ao destino <span class="log-coordinates">(${gameState.goal[0]},${gameState.goal[1]})</span>`);
            }
        }
    }
    
    // Validar caminho final
    if (finalPath.length === 0) {
        addLogEntry('error', '‚ùå N√£o foi poss√≠vel criar caminho v√°lido');
        return;
    }
    
    // VALIDA√á√ÉO FINAL: Verificar se n√£o h√° saltos imposs√≠veis
    const validatedPath = [];
    validatedPath.push(finalPath[0]);
    
    for (let i = 1; i < finalPath.length; i++) {
        const current = finalPath[i];
        const previous = finalPath[i-1];
        
        const distance = Math.abs(current[0] - previous[0]) + Math.abs(current[1] - previous[1]);
        const isDiagonal = Math.abs(current[0] - previous[0]) === 1 && Math.abs(current[1] - previous[1]) === 1;
        
        if (distance <= 2 && (distance <= 1 || isDiagonal)) {
            validatedPath.push(current);
        } else {
            // Salto inv√°lido detectado - usar A* para corrigir
            addLogEntry('error', `üö´ Salto inv√°lido detectado: <span class="log-coordinates">(${previous[0]},${previous[1]})</span> ‚Üí <span class="log-coordinates">(${current[0]},${current[1]})</span>`);
            const fixSegment = findPath(previous, current, gameState.obstacles.concat(gameState.dynamicObstacles));
            
            if (fixSegment.length > 0) {
                validatedPath.push(...fixSegment.slice(1));
            } else {
                validatedPath.push(current); // Fallback
            }
        }
    }
    
    // Aplicar o caminho validado
    gameState.currentPath = validatedPath;
    gameState.stats.pathLength = validatedPath.length;
    
    addLogEntry('success', `üöÄ Caminho personalizado criado com ${validatedPath.length} passos!`);
    addLogEntry('pathfinding', `üó∫Ô∏è Rota: ${validatedPath.slice(0, 10).map(p => `(${p[0]},${p[1]})`).join(' ‚Üí ')}${validatedPath.length > 10 ? '...' : ''}`);
    
    // Atualizar visual
    updateGridVisually();
    
    // Iniciar caminhada automaticamente
    setTimeout(() => {
        startWalking();
    }, 1000);
}

function clearObstacles() {
    gameState.dynamicObstacles = [];
    gameState.stats.dynamicObstacles = 0;
    
    if (currentMode === 'interactive') {
        calculateAndShowPath();
    } else {
        createGrid(demoSteps[currentStepIndex]);
    }
}

function nextStep() {
    if (currentStepIndex < demoSteps.length - 1) {
        currentStepIndex++;
        createGrid(demoSteps[currentStepIndex]);
    }
}

function resetDemo() {
    currentStepIndex = 0;
    stopWalking(); // Para qualquer caminhada em andamento
    
    gameState.stats = {
        cellsProcessed: 0,
        dynamicObstacles: 0,
        replanningCount: 0,
        pathLength: 0
    };
    
    // Limpar rastros visuais
    gameState.visitedCells = [];
    gameState.steppedCells = [];
    gameState.detourCells = [];
    gameState.customPath = [];
    gameState.waypoints = [];
    gameState.isOnDetour = false;
    
    if (autoPlayInterval) {
        clearInterval(autoPlayInterval);
        autoPlayInterval = null;
    }
    
    if (currentMode === 'demo') {
        createGrid(demoSteps[0]);
    } else {
        calculateAndShowPath();
    }
}

function autoPlay() {
    if (autoPlayInterval) {
        clearInterval(autoPlayInterval);
        autoPlayInterval = null;
        document.getElementById('auto-btn').textContent = '‚èØÔ∏è Auto Play';
        return;
    }
    
    document.getElementById('auto-btn').textContent = '‚è∏Ô∏è Pausar';
    autoPlayInterval = setInterval(() => {
        if (currentStepIndex < demoSteps.length - 1) {
            nextStep();
        } else {
            clearInterval(autoPlayInterval);
            autoPlayInterval = null;
            document.getElementById('auto-btn').textContent = '‚èØÔ∏è Auto Play';
        }
    }, playbackSpeed);
}

// === GERADOR DE CEN√ÅRIOS ALEAT√ìRIOS ===
function generateRandomScenario(difficulty) {
    // Parar caminhada se estiver ativa
    if (isWalking) {
        stopWalking();
    }
    
    // Limpar cen√°rio atual
    clearCurrentScenario();
    
    let obstacleCount, pokemonCount, description;
    
    switch(difficulty) {
        case 'easy':
            obstacleCount = Math.floor(Math.random() * 8) + 5; // 5-12 obst√°culos
            pokemonCount = Math.floor(Math.random() * 3) + 1; // 1-3 pok√©mon
            description = 'Cen√°rio F√°cil - Poucos obst√°culos, caminho direto poss√≠vel';
            break;
        case 'medium':
            obstacleCount = Math.floor(Math.random() * 12) + 10; // 10-21 obst√°culos
            pokemonCount = Math.floor(Math.random() * 4) + 2; // 2-5 pok√©mon
            description = 'Cen√°rio M√©dio - Obst√°culos moderados, alguns desvios necess√°rios';
            break;
        case 'hard':
            obstacleCount = Math.floor(Math.random() * 15) + 20; // 20-34 obst√°culos
            pokemonCount = Math.floor(Math.random() * 6) + 3; // 3-8 pok√©mon
            description = 'Cen√°rio Dif√≠cil - Muitos obst√°culos, navega√ß√£o complexa';
            break;
    }
    
    // Gerar obst√°culos est√°ticos
    const attempts = obstacleCount * 3; // M√∫ltiplas tentativas para evitar loops infinitos
    let placedObstacles = 0;
    
    for (let i = 0; i < attempts && placedObstacles < obstacleCount; i++) {
        const row = Math.floor(Math.random() * GRID_SIZE);
        const col = Math.floor(Math.random() * GRID_SIZE);
        
        if (isValidObstaclePosition(row, col)) {
            gameState.obstacles.push([row, col]);
            placedObstacles++;
        }
    }
    
    // Gerar pok√©mon (obst√°culos din√¢micos)
    let placedPokemon = 0;
    for (let i = 0; i < attempts && placedPokemon < pokemonCount; i++) {
        const row = Math.floor(Math.random() * GRID_SIZE);
        const col = Math.floor(Math.random() * GRID_SIZE);
        
        if (isValidObstaclePosition(row, col)) {
            gameState.dynamicObstacles.push([row, col]);
            gameState.stats.dynamicObstacles++;
            placedPokemon++;
        }
    }
    
    // Logs informativos
    addLogEntry('system', `üé≤ ${description}`);
    addLogEntry('system', `üìä Gerado: ${placedObstacles} obst√°culos, ${placedPokemon} pok√©mon`);
    
    // Verificar se caminho √© poss√≠vel
    const testPath = findPath(gameState.start, gameState.goal, gameState.obstacles.concat(gameState.dynamicObstacles));
    if (testPath.length === 0) {
        addLogEntry('error', '‚ö†Ô∏è Cen√°rio imposs√≠vel detectado! Removendo alguns obst√°culos...');
        fixImpossibleScenario();
    } else {
        addLogEntry('success', `‚úÖ Cen√°rio v√°lido! Caminho de ${testPath.length} passos encontrado`);
        
        // Calcular e mostrar caminho automaticamente
        gameState.currentPath = testPath;
        gameState.originalPath = [...testPath];
        gameState.stats.pathLength = testPath.length;
        
        addLogEntry('pathfinding', `üß† Caminho calculado automaticamente: ${testPath.length} passos`);
        addLogEntry('system', `üöÄ Pronto para iniciar! Clique em "üö∂ Iniciar Caminhada" quando quiser`);
    }
    
    // Atualizar visual
    updateVisualAfterScenarioGeneration();
}

function generateMaze(type) {
    // Parar caminhada se estiver ativa
    if (isWalking) {
        stopWalking();
    }
    
    // Limpar cen√°rio atual
    clearCurrentScenario();
    
    switch(type) {
        case 'spiral':
            generateSpiralMaze();
            break;
        case 'zigzag':
            generateZigZagMaze();
            break;
        case 'cross':
            generateCrossMaze();
            break;
        case 'chambers':
            generateChambersMaze();
            break;
    }
    
    // Adicionar alguns pok√©mon aleat√≥rios
    addRandomPokemonToMaze(2, 4);
    
    // Calcular caminho automaticamente
    const mazePath = findPath(gameState.start, gameState.goal, gameState.obstacles.concat(gameState.dynamicObstacles));
    if (mazePath.length === 0) {
        addLogEntry('error', '‚ö†Ô∏è Labirinto sem solu√ß√£o! Corrigindo...');
        fixImpossibleScenario();
    } else {
        gameState.currentPath = mazePath;
        gameState.originalPath = [...mazePath];
        gameState.stats.pathLength = mazePath.length;
        
        addLogEntry('pathfinding', `üß† Caminho do labirinto calculado: ${mazePath.length} passos`);
        addLogEntry('success', `üèÜ Labirinto ${type} pronto! Clique em "üö∂ Iniciar Caminhada"`);
    }
    
    // Atualizar visual
    updateVisualAfterScenarioGeneration();
}

function generateSpiralMaze() {
    addLogEntry('system', 'üå™Ô∏è Gerando labirinto em espiral...');
    
    // Criar espiral do centro para fora
    const center = Math.floor(GRID_SIZE / 2);
    let radius = 1;
    
    while (radius < center) {
        // Lado superior
        for (let col = center - radius; col <= center + radius; col++) {
            if (isValidObstaclePosition(center - radius, col)) {
                gameState.obstacles.push([center - radius, col]);
            }
        }
        
        // Lado direito
        for (let row = center - radius + 1; row <= center + radius; row++) {
            if (isValidObstaclePosition(row, center + radius)) {
                gameState.obstacles.push([row, center + radius]);
            }
        }
        
        // Lado inferior (se n√£o for a mesma linha do topo)
        if (radius > 0) {
            for (let col = center + radius - 1; col >= center - radius; col--) {
                if (isValidObstaclePosition(center + radius, col)) {
                    gameState.obstacles.push([center + radius, col]);
                }
            }
        }
        
        // Lado esquerdo (se n√£o for a mesma coluna da direita)
        if (radius > 0) {
            for (let row = center + radius - 1; row > center - radius; row--) {
                if (isValidObstaclePosition(row, center - radius)) {
                    gameState.obstacles.push([row, center - radius]);
                }
            }
        }
        
        radius += 2; // Pular uma linha para criar corredor
    }
    
    addLogEntry('success', `‚úÖ Espiral gerada com ${gameState.obstacles.length} obst√°culos`);
}

function generateZigZagMaze() {
    addLogEntry('system', '‚ö° Gerando labirinto zigue-zague...');
    
    for (let row = 1; row < GRID_SIZE - 1; row += 2) {
        // Linha horizontal
        for (let col = 1; col < GRID_SIZE - 1; col++) {
            if (isValidObstaclePosition(row, col)) {
                gameState.obstacles.push([row, col]);
            }
        }
        
        // Conex√£o vertical alternada
        if (row < GRID_SIZE - 2) {
            const connectCol = (row / 2) % 2 === 0 ? 1 : GRID_SIZE - 2;
            if (isValidObstaclePosition(row + 1, connectCol)) {
                gameState.obstacles.push([row + 1, connectCol]);
            }
        }
    }
    
    addLogEntry('success', `‚úÖ Zigue-zague gerado com ${gameState.obstacles.length} obst√°culos`);
}

function generateCrossMaze() {
    addLogEntry('system', '‚ú® Gerando labirinto em cruz...');
    
    const center = Math.floor(GRID_SIZE / 2);
    
    // Cruz vertical
    for (let row = 1; row < GRID_SIZE - 1; row++) {
        if (row !== center && isValidObstaclePosition(row, center)) {
            gameState.obstacles.push([row, center]);
        }
    }
    
    // Cruz horizontal
    for (let col = 1; col < GRID_SIZE - 1; col++) {
        if (col !== center && isValidObstaclePosition(center, col)) {
            gameState.obstacles.push([center, col]);
        }
    }
    
    // Quadrantes com obst√°culos esparsos
    for (let quad = 0; quad < 4; quad++) {
        const startRow = quad < 2 ? 1 : center + 1;
        const endRow = quad < 2 ? center - 1 : GRID_SIZE - 2;
        const startCol = quad % 2 === 0 ? 1 : center + 1;
        const endCol = quad % 2 === 0 ? center - 1 : GRID_SIZE - 2;
        
        // Adicionar alguns obst√°culos aleat√≥rios em cada quadrante
        const obstaclesPerQuad = 3 + Math.floor(Math.random() * 3);
        for (let i = 0; i < obstaclesPerQuad; i++) {
            const row = startRow + Math.floor(Math.random() * (endRow - startRow + 1));
            const col = startCol + Math.floor(Math.random() * (endCol - startCol + 1));
            
            if (isValidObstaclePosition(row, col)) {
                gameState.obstacles.push([row, col]);
            }
        }
    }
    
    addLogEntry('success', `‚úÖ Cruz gerada com ${gameState.obstacles.length} obst√°culos`);
}

function generateChambersMaze() {
    addLogEntry('system', 'üè† Gerando labirinto de c√¢maras...');
    
    // Criar c√¢maras 3x3 com corredores
    const chamberSize = 3;
    const chambers = [];
    
    for (let r = 0; r < GRID_SIZE; r += chamberSize + 1) {
        for (let c = 0; c < GRID_SIZE; c += chamberSize + 1) {
            chambers.push({row: r, col: c});
        }
    }
    
    chambers.forEach(chamber => {
        // Criar paredes da c√¢mara
        for (let dr = 0; dr < chamberSize; dr++) {
            for (let dc = 0; dc < chamberSize; dc++) {
                const row = chamber.row + dr;
                const col = chamber.col + dc;
                
                // Paredes externas da c√¢mara
                if (dr === 0 || dr === chamberSize - 1 || dc === 0 || dc === chamberSize - 1) {
                    if (isValidObstaclePosition(row, col)) {
                        gameState.obstacles.push([row, col]);
                    }
                }
            }
        }
        
        // Criar uma abertura aleat√≥ria em cada parede
        const walls = ['top', 'right', 'bottom', 'left'];
        const openWall = walls[Math.floor(Math.random() * walls.length)];
        
        let openRow, openCol;
        switch(openWall) {
            case 'top':
                openRow = chamber.row;
                openCol = chamber.col + Math.floor(Math.random() * chamberSize);
                break;
            case 'bottom':
                openRow = chamber.row + chamberSize - 1;
                openCol = chamber.col + Math.floor(Math.random() * chamberSize);
                break;
            case 'left':
                openRow = chamber.row + Math.floor(Math.random() * chamberSize);
                openCol = chamber.col;
                break;
            case 'right':
                openRow = chamber.row + Math.floor(Math.random() * chamberSize);
                openCol = chamber.col + chamberSize - 1;
                break;
        }
        
        // Remover obst√°culo da abertura
        gameState.obstacles = gameState.obstacles.filter(obs => 
            !(obs[0] === openRow && obs[1] === openCol));
    });
    
    addLogEntry('success', `‚úÖ C√¢maras geradas com ${gameState.obstacles.length} obst√°culos`);
}

function isValidObstaclePosition(row, col) {
    // N√£o pode ser in√≠cio ou fim
    if ((row === gameState.start[0] && col === gameState.start[1]) ||
        (row === gameState.goal[0] && col === gameState.goal[1])) {
        return false;
    }
    
    // N√£o pode j√° ter obst√°culo
    if (gameState.obstacles.some(obs => obs[0] === row && obs[1] === col) ||
        gameState.dynamicObstacles.some(obs => obs[0] === row && obs[1] === col)) {
        return false;
    }
    
    // Deve estar dentro dos limites
    return row >= 0 && row < GRID_SIZE && col >= 0 && col < GRID_SIZE;
}

function clearCurrentScenario() {
    gameState.obstacles = [];
    gameState.dynamicObstacles = [];
    gameState.currentPath = [];
    gameState.visitedCells = [];
    gameState.steppedCells = [];
    gameState.detourCells = [];
    gameState.customPath = [];
    gameState.waypoints = [];
    gameState.stats.dynamicObstacles = 0;
    gameState.stats.replanningCount = 0;
    gameState.stats.cellsProcessed = 0;
    gameState.stats.pathLength = 0;
}

function fixImpossibleScenario() {
    // Remove obst√°culos aleat√≥rios at√© encontrar um caminho
    let attempts = 0;
    const maxAttempts = 20;
    
    while (attempts < maxAttempts) {
        const testPath = findPath(gameState.start, gameState.goal, gameState.obstacles.concat(gameState.dynamicObstacles));
        if (testPath.length > 0) {
            addLogEntry('success', `‚úÖ Cen√°rio corrigido! Caminho encontrado com ${testPath.length} passos`);
            
            // Aplicar caminho corrigido
            gameState.currentPath = testPath;
            gameState.originalPath = [...testPath];
            gameState.stats.pathLength = testPath.length;
            
            addLogEntry('pathfinding', `üß† Caminho calculado ap√≥s corre√ß√£o: ${testPath.length} passos`);
            addLogEntry('system', `üöÄ Cen√°rio pronto! Clique em "üö∂ Iniciar Caminhada"`);
            return;
        }
        
        // Remove um obst√°culo aleat√≥rio
        if (gameState.obstacles.length > 0) {
            const randomIndex = Math.floor(Math.random() * gameState.obstacles.length);
            const removed = gameState.obstacles.splice(randomIndex, 1)[0];
            addLogEntry('system', `üîß Removido obst√°culo em (${removed[0]},${removed[1]})`);
        }
        
        attempts++;
    }
    
    addLogEntry('error', '‚ùå N√£o foi poss√≠vel corrigir o cen√°rio. Gerando cen√°rio simples...');
    generateSimpleFallbackScenario();
}

function generateSimpleFallbackScenario() {
    clearCurrentScenario();
    // Cen√°rio super simples garantido
    gameState.obstacles = [[2,2], [3,3], [6,6], [7,7]];
    gameState.dynamicObstacles = [[4,4]];
    gameState.stats.dynamicObstacles = 1;
    
    // Calcular caminho do fallback
    const fallbackPath = findPath(gameState.start, gameState.goal, gameState.obstacles.concat(gameState.dynamicObstacles));
    gameState.currentPath = fallbackPath;
    gameState.originalPath = [...fallbackPath];
    gameState.stats.pathLength = fallbackPath.length;
    
    addLogEntry('system', 'üõü Cen√°rio de fallback gerado - sempre funciona!');
    addLogEntry('pathfinding', `üß† Caminho fallback: ${fallbackPath.length} passos`);
    addLogEntry('success', `‚úÖ Pronto para come√ßar!`);
}

function addRandomPokemonToMaze(min, max) {
    const pokemonCount = min + Math.floor(Math.random() * (max - min + 1));
    let added = 0;
    
    for (let i = 0; i < pokemonCount * 5 && added < pokemonCount; i++) {
        const row = Math.floor(Math.random() * GRID_SIZE);
        const col = Math.floor(Math.random() * GRID_SIZE);
        
        if (isValidObstaclePosition(row, col)) {
            gameState.dynamicObstacles.push([row, col]);
            gameState.stats.dynamicObstacles++;
            added++;
        }
    }
    
    addLogEntry('system', `üêõ Adicionados ${added} pok√©mon ao labirinto`);
}

function updateVisualAfterScenarioGeneration() {
    // Sempre atualizar estat√≠sticas
    updateStats();
    
    if (currentMode === 'interactive') {
        // No modo interativo, usar o caminho j√° calculado
        updateGridVisually();
    } else if (currentMode === 'custom') {
        updateGridVisually();
    } else {
        // No modo demo, mostrar o grid com o cen√°rio gerado
        createGrid();
    }
    
    // Criar personagem na posi√ß√£o inicial
    createCharacter();
}

// === SISTEMA DE TEMA ===
function toggleTheme() {
    const body = document.body;
    const themeToggle = document.getElementById('theme-toggle');
    
    body.classList.toggle('dark-theme');
    
    if (body.classList.contains('dark-theme')) {
        themeToggle.textContent = '‚òÄÔ∏è Modo Claro';
        localStorage.setItem('darkTheme', 'true');
        addLogEntry('system', 'üåô Tema escuro ativado - muito melhor para os olhos!');
    } else {
        themeToggle.textContent = 'üåô Modo Escuro';
        localStorage.setItem('darkTheme', 'false');
        addLogEntry('system', '‚òÄÔ∏è Tema claro ativado');
    }
}

function loadTheme() {
    const savedTheme = localStorage.getItem('darkTheme');
    const body = document.body;
    const themeToggle = document.getElementById('theme-toggle');
    
    if (savedTheme === 'true') {
        body.classList.add('dark-theme');
        themeToggle.textContent = '‚òÄÔ∏è Modo Claro';
    } else {
        body.classList.remove('dark-theme');
        themeToggle.textContent = 'üåô Modo Escuro';
    }
}

// === CONFIGURA√á√ïES AVAN√áADAS ===

function toggleAdvancedSettings() {
    const content = document.getElementById('settings-content');
    const toggle = document.getElementById('settings-toggle');
    
    if (content.classList.contains('collapsed')) {
        content.classList.remove('collapsed');
        toggle.textContent = '‚ñº';
        addLogEntry('system', 'üîß Configura√ß√µes avan√ßadas expandidas');
    } else {
        content.classList.add('collapsed');
        toggle.textContent = '‚ñ∂';
        addLogEntry('system', 'üîß Configura√ß√µes avan√ßadas recolhidas');
    }
}

function changeGridSize(newSize) {
    const oldSize = GRID_SIZE;
    GRID_SIZE = parseInt(newSize);
    advancedConfig.gridSize = GRID_SIZE;
    
    // Parar caminhada se estiver ativa
    if (isWalking) {
        stopWalking();
    }
    
    // RESET COMPLETO DAS POSI√á√ïES - muito mais seguro
    addLogEntry('system', `üìê Redimensionando grid de ${oldSize}x${oldSize} para ${GRID_SIZE}x${GRID_SIZE}`);
    
    // Posi√ß√µes fixas e seguras baseadas no novo tamanho
    gameState.start = [0, 0]; // Sempre canto superior esquerdo
    gameState.goal = [GRID_SIZE - 1, GRID_SIZE - 1]; // Sempre canto inferior direito
    
    // Limpar TUDO que pode causar problemas
    gameState.obstacles = [];
    gameState.dynamicObstacles = [];
    gameState.currentPath = [];
    gameState.visitedCells = [];
    gameState.steppedCells = [];
    gameState.detourCells = [];
    gameState.customPath = [];
    gameState.waypoints = [];
    gameState.originalPath = [];
    
    // Resetar stats
    gameState.stats = {
        cellsProcessed: 0,
        dynamicObstacles: 0,
        replanningCount: 0,
        pathLength: 0
    };
    
    // Resetar vari√°veis de caminhada
    currentWalkStep = 0;
    finalApproach = false;
    
    // Adicionar alguns obst√°culos simples baseados no tamanho do grid
    const numObstacles = Math.floor(GRID_SIZE * 0.8); // 80% do tamanho
    for (let i = 0; i < numObstacles; i++) {
        const row = Math.floor(Math.random() * (GRID_SIZE - 2)) + 1; // Evitar bordas
        const col = Math.floor(Math.random() * (GRID_SIZE - 2)) + 1;
        
        // N√£o colocar obst√°culo no in√≠cio ou fim
        if ((row !== 0 || col !== 0) && (row !== GRID_SIZE-1 || col !== GRID_SIZE-1)) {
            if (!gameState.obstacles.some(obs => obs[0] === row && obs[1] === col)) {
                gameState.obstacles.push([row, col]);
            }
        }
    }
    
    addLogEntry('system', `üéØ Posi√ß√µes resetadas: In√≠cio(0,0), Destino(${GRID_SIZE-1},${GRID_SIZE-1})`);
    addLogEntry('system', `üìä Adicionados ${gameState.obstacles.length} obst√°culos aleat√≥rios`);
    
    // Ajustar tamanho das c√©lulas no CSS dinamicamente
    updateGridCellSize();
    
    // Recriar grid COMPLETAMENTE
    createGrid();
    
    // Calcular caminho automaticamente no modo interativo
    if (currentMode === 'interactive') {
        setTimeout(() => {
            calculateAndShowPath();
        }, 100);
    }
    
    const dims = getGridDimensions();
    addLogEntry('success', `‚úÖ Grid ${GRID_SIZE}x${GRID_SIZE} criado - C√©lulas: ${dims.cellSize}px, Personagem: ${dims.characterSize}px`);
}

function updateGridCellSize() {
    const grid = document.getElementById('grid');
    if (!grid) return;
    
    const dims = getGridDimensions();
    
    let fontSize;
    switch(GRID_SIZE) {
        case 8: fontSize = 14; break;
        case 10: fontSize = 12; break;
        default: fontSize = 12;
    }
    
    console.log(`üîß Atualizando grid ${GRID_SIZE}x${GRID_SIZE} com c√©lulas ${dims.cellSize}px`);
    
    // 1. Atualizar grid CSS
    grid.style.gridTemplateColumns = `repeat(${GRID_SIZE}, ${dims.cellSize}px)`;
    grid.style.gap = dims.gap + 'px';
    grid.style.width = 'fit-content';
    grid.style.height = 'fit-content';
    grid.style.transform = 'none';
    grid.style.margin = '20px auto';
    
    // 2. Atualizar c√©lulas
    const cells = grid.querySelectorAll('.cell');
    cells.forEach(cell => {
        cell.style.width = dims.cellSize + 'px';
        cell.style.height = dims.cellSize + 'px';
        cell.style.fontSize = fontSize + 'px';
    });
    
    // 3. Calcular se precisa de escala
    const totalWidth = GRID_SIZE * dims.cellSize + (GRID_SIZE - 1) * dims.gap + 40;
    const maxWidth = window.innerWidth * 0.6; // 60% da tela
    
    if (totalWidth > maxWidth) {
        const scale = maxWidth / totalWidth;
        grid.style.transform = `scale(${scale})`;
        grid.style.transformOrigin = 'center';
        addLogEntry('system', `üìè Grid reduzido para ${(scale * 100).toFixed(0)}%`);
    } else {
        addLogEntry('system', `üìê Grid ${GRID_SIZE}x${GRID_SIZE} em tamanho normal`);
    }
    
    console.log(`‚úÖ Grid: ${cells.length} c√©lulas, total: ${totalWidth}px`);
    
    // 4. Reposicionar rob√¥
    if (character) {
        repositionCharacter();
    }
}

function repositionCharacter(scale = 1) {
    if (!character) return;
    
    const dims = getGridDimensions();
    
    // Validar e corrigir posi√ß√£o inicial
    if (gameState.start[0] >= GRID_SIZE || gameState.start[1] >= GRID_SIZE || 
        gameState.start[0] < 0 || gameState.start[1] < 0) {
        gameState.start = [0, 0];
        addLogEntry('system', 'üéØ Posi√ß√£o inicial corrigida para (0,0)');
    }
    
    // Usar posi√ß√£o inicial como base
    let currentRow = gameState.start[0];
    let currentCol = gameState.start[1];
    
    // Se estiver caminhando, usar posi√ß√£o do caminho
    if (isWalking && gameState.currentPath && currentWalkStep > 0) {
        const currentPos = gameState.currentPath[Math.min(currentWalkStep - 1, gameState.currentPath.length - 1)];
        if (currentPos && currentPos[0] < GRID_SIZE && currentPos[1] < GRID_SIZE) {
            currentRow = currentPos[0];
            currentCol = currentPos[1];
        }
    }
    
    // Calcular posi√ß√£o baseada na c√©lula real do DOM
    const targetCell = document.getElementById(`cell-${currentRow}-${currentCol}`);
    if (!targetCell) {
        console.error(`C√©lula (${currentRow},${currentCol}) n√£o encontrada!`);
        return;
    }
    
    const targetCellRect = targetCell.getBoundingClientRect();
    const gridRect = targetCell.parentElement.getBoundingClientRect();
    
    // Posi√ß√£o relativa √† grid container
    const cellLeft = targetCellRect.left - gridRect.left;
    const cellTop = targetCellRect.top - gridRect.top;
    
    // Centralizar o rob√¥ na c√©lula usando as dimens√µes reais
    const left = cellLeft + (targetCellRect.width / 2) - (dims.characterSize / 2);
    const top = cellTop + (targetCellRect.height / 2) - (dims.characterSize / 2);
    
    // Aplicar posi√ß√£o
    character.style.left = left + 'px';
    character.style.top = top + 'px';
    character.style.width = dims.characterSize + 'px';
    character.style.height = dims.characterSize + 'px';
    
    console.log(`ü§ñ Rob√¥ posicionado em (${currentRow},${currentCol}) -> ${left}px, ${top}px`);
}

function changeMovementType(type) {
    advancedConfig.movementType = parseInt(type);
    const typeName = type === '8' ? '8-Dire√ß√µes (Diagonal)' : '4-Dire√ß√µes (Ortogonal)';
    
    addLogEntry('system', `üß≠ Tipo de movimento alterado para: ${typeName}`);
    
    // Recalcular caminho se n√£o estiver caminhando
    if (!isWalking && currentMode === 'interactive') {
        calculateAndShowPath();
    }
}

function changeObstacleSpeed(speed) {
    advancedConfig.obstacleSpeed = parseInt(speed);
    updateObstacleSpeedDisplay(speed);
    
    // Reiniciar obst√°culos m√≥veis com nova velocidade
    if (movingObstaclesInterval && currentMode === 'interactive') {
        stopMovingObstacles();
        setTimeout(() => {
            startMovingObstacles();
        }, 500);
    }
    
    addLogEntry('system', `üêõ Velocidade dos Pok√©mon alterada para ${(speed/1000).toFixed(1)}s`);
}

function updateObstacleSpeedDisplay(speed) {
    const display = document.getElementById('obstacle-speed-display');
    if (display) {
        display.textContent = (speed / 1000).toFixed(1) + 's';
    }
}

function changeSpawnFrequency(frequency) {
    advancedConfig.spawnFrequency = parseInt(frequency);
    updateSpawnFrequencyDisplay(frequency);
    
    // Parar spawn anterior
    if (spawnInterval) {
        clearInterval(spawnInterval);
        spawnInterval = null;
    }
    
    // Iniciar novo spawn se n√£o for 0
    if (frequency > 0 && currentMode === 'interactive') {
        startAutoSpawn();
        addLogEntry('system', `‚è∞ Auto-spawn ativado: novo Pok√©mon a cada ${(frequency/1000).toFixed(1)}s`);
    } else {
        addLogEntry('system', '‚è∞ Auto-spawn desabilitado');
    }
}

function updateSpawnFrequencyDisplay(frequency) {
    const display = document.getElementById('spawn-frequency-display');
    if (display) {
        if (frequency === 0) {
            display.textContent = 'Desabilitado';
        } else {
            display.textContent = `${(frequency / 1000).toFixed(1)}s`;
        }
    }
}

function startAutoSpawn() {
    if (spawnInterval || advancedConfig.spawnFrequency === 0) return;
    
    spawnInterval = setInterval(() => {
        if (currentMode === 'interactive' && !isWalking) {
            // S√≥ spawnar se n√£o estiver caminhando para n√£o atrapalhar
            addRandomPokemon();
        }
    }, advancedConfig.spawnFrequency);
}

function stopAutoSpawn() {
    if (spawnInterval) {
        clearInterval(spawnInterval);
        spawnInterval = null;
    }
}

function changeReplanLimit(limit) {
    advancedConfig.replanLimit = parseInt(limit);
    let limitText;
    
    switch(limit) {
        case '3': limitText = '3 rec√°lculos (R√°pido)'; break;
        case '5': limitText = '5 rec√°lculos (Padr√£o)'; break;
        case '10': limitText = '10 rec√°lculos (Persistente)'; break;
        case '-1': limitText = 'Ilimitado (Teimoso)'; break;
        default: limitText = limit + ' rec√°lculos';
    }
    
    addLogEntry('system', `‚ö° Limite de rec√°lculos: ${limitText}`);
}

function toggleCoordinates(show) {
    advancedConfig.showCoordinates = show;
    
    const coords = document.querySelectorAll('.coords');
    if (coords.length > 0) {
        coords.forEach(coord => {
            coord.style.display = show ? 'block' : 'none';
        });
        addLogEntry('system', show ? 'üëÅÔ∏è Coordenadas exibidas' : 'üëÅÔ∏è Coordenadas ocultas');
    }
}

function toggleOriginalPathHighlight(highlight) {
    advancedConfig.highlightOriginal = highlight;
    
    if (highlight && gameState.originalPath.length > 0) {
        addLogEntry('system', 'üéØ Caminho original destacado em amarelo');
        // Adicionar classe especial para caminho original
        gameState.originalPath.forEach(pos => {
            const cell = document.getElementById(`cell-${pos[0]}-${pos[1]}`);
            if (cell) {
                cell.classList.add('original-path-highlight');
            }
        });
    } else {
        addLogEntry('system', 'üéØ Destaque do caminho original removido');
        // Remover classe especial
        document.querySelectorAll('.original-path-highlight').forEach(cell => {
            cell.classList.remove('original-path-highlight');
        });
    }
}

function resetToDefaults() {
    // Valores padr√£o
    const defaults = {
        gridSize: 10,
        movementType: 8,
        obstacleSpeed: 3000,
        spawnFrequency: 0,
        replanLimit: 5,
        showCoordinates: true,
        highlightOriginal: false
    };
    
    // Aplicar valores padr√£o
    document.getElementById('grid-size-select').value = defaults.gridSize;
    document.getElementById('movement-type-select').value = defaults.movementType;
    document.getElementById('obstacle-speed-slider').value = defaults.obstacleSpeed;
    document.getElementById('spawn-frequency-slider').value = defaults.spawnFrequency;
    document.getElementById('replan-limit-select').value = defaults.replanLimit;
    document.getElementById('show-coordinates').checked = defaults.showCoordinates;
    document.getElementById('highlight-original').checked = defaults.highlightOriginal;
    
    // Aplicar configura√ß√µes
    Object.assign(advancedConfig, defaults);
    
    // Aplicar mudan√ßas
    if (GRID_SIZE !== defaults.gridSize) {
        changeGridSize(defaults.gridSize);
    }
    changeMovementType(defaults.movementType);
    updateObstacleSpeedDisplay(defaults.obstacleSpeed);
    updateSpawnFrequencyDisplay(defaults.spawnFrequency);
    toggleCoordinates(defaults.showCoordinates);
    toggleOriginalPathHighlight(defaults.highlightOriginal);
    
    addLogEntry('success', 'üîÑ Configura√ß√µes restauradas para os valores padr√£o');
}

function forceResetGrid() {
    // For√ßar reset do grid para 10x10
    if (isWalking) {
        stopWalking();
    }
    
    // Resetar tamanho
    GRID_SIZE = 10;
    advancedConfig.gridSize = 10;
    document.getElementById('grid-size-select').value = 10;
    
    // Resetar posi√ß√µes
    gameState.start = [0, 0];
    gameState.goal = [9, 9];
    gameState.obstacles = [[2,2], [2,3], [3,3], [5,5], [5,6], [6,5], [7,8]];
    gameState.dynamicObstacles = [];
    gameState.currentPath = [];
    gameState.visitedCells = [];
    gameState.steppedCells = [];
    gameState.detourCells = [];
    gameState.customPath = [];
    gameState.waypoints = [];
    
    // Limpar stats
    gameState.stats = {
        cellsProcessed: 0,
        dynamicObstacles: 0,
        replanningCount: 0,
        pathLength: 0
    };
    
    addLogEntry('system', '‚ö° RESET FOR√áADO - Grid resetado para 10x10');
    addLogEntry('system', 'üéØ Posi√ß√µes resetadas: In√≠cio(0,0), Destino(9,9)');
    
    // Recriar grid
    createGrid();
    
    addLogEntry('success', '‚úÖ Grid resetado com sucesso!');
}

function forceCreateRobot() {
    addLogEntry('system', 'ü§ñ For√ßando recria√ß√£o do rob√¥...');
    
    // Garantir posi√ß√£o v√°lida
    if (gameState.start[0] >= GRID_SIZE || gameState.start[1] >= GRID_SIZE || 
        gameState.start[0] < 0 || gameState.start[1] < 0) {
        gameState.start = [0, 0];
        addLogEntry('system', 'üéØ Posi√ß√£o inicial corrigida para (0,0)');
    }
    
    // Remover qualquer rob√¥ existente
    const existingRobot = document.getElementById('walking-character');
    if (existingRobot) {
        existingRobot.remove();
        addLogEntry('system', 'üóëÔ∏è Rob√¥ antigo removido');
    }
    
    // Resetar vari√°vel
    character = null;
    
    // Criar novo rob√¥
    createCharacter();
    
    // Recalcular caminho se necess√°rio
    if (currentMode === 'interactive') {
        setTimeout(() => {
            calculateAndShowPath();
        }, 100);
    }
    
    addLogEntry('success', '‚úÖ Rob√¥ recriado com sucesso!');
}

function saveSettings() {
    try {
        localStorage.setItem('astarAdvancedConfig', JSON.stringify(advancedConfig));
        addLogEntry('success', 'üíæ Configura√ß√µes salvas com sucesso!');
    } catch (error) {
        addLogEntry('error', '‚ùå Erro ao salvar configura√ß√µes: ' + error.message);
    }
}

function loadSettings() {
    try {
        const saved = localStorage.getItem('astarAdvancedConfig');
        if (saved) {
            const config = JSON.parse(saved);
            
            // Aplicar configura√ß√µes salvas aos controles
            document.getElementById('grid-size-select').value = config.gridSize || 10;
            document.getElementById('movement-type-select').value = config.movementType || 8;
            document.getElementById('obstacle-speed-slider').value = config.obstacleSpeed || 3000;
            document.getElementById('spawn-frequency-slider').value = config.spawnFrequency || 0;
            document.getElementById('replan-limit-select').value = config.replanLimit || 5;
            document.getElementById('show-coordinates').checked = config.showCoordinates !== false;
            document.getElementById('highlight-original').checked = config.highlightOriginal || false;
            
            // Aplicar configura√ß√µes
            Object.assign(advancedConfig, config);
            
            // Aplicar mudan√ßas visuais (apenas se o grid for diferente)
            if (GRID_SIZE !== config.gridSize && document.getElementById('grid')) {
                changeGridSize(config.gridSize);
            } else if (config.gridSize) {
                // S√≥ atualizar a vari√°vel se o elemento n√£o existir ainda
                GRID_SIZE = config.gridSize;
                advancedConfig.gridSize = config.gridSize;
            }
            updateObstacleSpeedDisplay(config.obstacleSpeed || 3000);
            updateSpawnFrequencyDisplay(config.spawnFrequency || 0);
            toggleCoordinates(config.showCoordinates !== false);
            toggleOriginalPathHighlight(config.highlightOriginal || false);
            
            addLogEntry('success', 'üìÅ Configura√ß√µes carregadas com sucesso!');
        } else {
            addLogEntry('system', 'üìÅ Nenhuma configura√ß√£o salva encontrada');
        }
    } catch (error) {
        addLogEntry('error', '‚ùå Erro ao carregar configura√ß√µes: ' + error.message);
    }
}

// Inicializa√ß√£o
window.addEventListener('load', function() {
    console.log('üîÑ Iniciando sistema A*...');
    
    try {
        console.log('üìã Carregando tema...');
        loadTheme(); // Carregar tema salvo
        
        console.log('üéÆ Criando grid inicial...');
        createGrid(demoSteps[0]);
        
        // Log inicial sobre modo educacional
        setTimeout(() => {
            addLogEntry('system', 'üéì Sistema de Log Duplo ativo - Sistema | Educacional');
            addLogEntry('learning', 'üéì Log Educacional ativo - O A* explicar√° suas decis√µes aqui!');
            addLogEntry('learning', 'üí° Use o bot√£o "üéì ON/OFF" no cabe√ßalho para controlar este log');
        }, 300);
        
        console.log('‚öôÔ∏è Carregando configura√ß√µes...');
        // Carregar configura√ß√µes de forma segura
        setTimeout(() => {
            try {
                loadSettings();
            } catch (settingsError) {
                console.warn('Erro ao carregar configura√ß√µes:', settingsError);
            }
        }, 100);
        
        console.log('üéõÔ∏è Inicializando displays...');
        // Inicializar displays com timeout para garantir que elementos existam
        setTimeout(() => {
            updateObstacleSpeedDisplay(advancedConfig.obstacleSpeed);
            updateSpawnFrequencyDisplay(advancedConfig.spawnFrequency);
        }, 200);
        
        console.log('üñ±Ô∏è Configurando eventos...');
        // Adicionar eventos globais do mouse para desenho
        document.addEventListener('mouseup', () => {
            isMouseDown = false;
        });
        
        // Adicionar evento de clique no header das configura√ß√µes
        setTimeout(() => {
            const settingsHeader = document.querySelector('.settings-header');
            if (settingsHeader) {
                settingsHeader.addEventListener('click', toggleAdvancedSettings);
                console.log('‚úÖ Eventos das configura√ß√µes configurados');
            } else {
                console.warn('‚ö†Ô∏è Header das configura√ß√µes n√£o encontrado');
            }
        }, 100);
        
        // Adicionar evento de redimensionamento da janela
        window.addEventListener('resize', () => {
            console.log('üîÑ Janela redimensionada, recalculando grid...');
            setTimeout(() => {
                updateGridCellSize();
            }, 100);
        });
        
        addLogEntry('success', 'üöÄ Sistema inicializado com sucesso!');
        console.log('‚úÖ Inicializa√ß√£o completa!');
        
    } catch (error) {
        console.error('‚ùå Erro na inicializa√ß√£o:', error);
        
        // Tentar criar grid b√°sico mesmo com erro
        try {
            console.log('üîß Tentando criar grid de emerg√™ncia...');
            createGrid(demoSteps[0]);
            console.log('‚úÖ Grid de emerg√™ncia criado');
        } catch (gridError) {
            console.error('üí• Erro cr√≠tico ao criar grid:', gridError);
            alert('Erro cr√≠tico: N√£o foi poss√≠vel inicializar o simulador. Verifique o console para mais detalhes.');
        }
    }
});